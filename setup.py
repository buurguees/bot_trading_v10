"""
setup.py
Script de instalaci√≥n y configuraci√≥n del Trading Bot v10
Ubicaci√≥n: C:\TradingBot_v10\setup.py

Uso:
    python setup.py install    # Instalaci√≥n completa
    python setup.py develop    # Instalaci√≥n en modo desarrollo
    python setup.py test       # Ejecutar tests
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

class TradingBotSetup:
    """Configurador del Trading Bot v10"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.venv_path = self.project_root / "venv"
        self.python_exe = self.venv_path / "Scripts" / "python.exe"
        self.pip_exe = self.venv_path / "Scripts" / "pip.exe"
        
    def check_python_version(self):
        """Verifica la versi√≥n de Python"""
        logger.info("üêç Verificando versi√≥n de Python...")
        
        if sys.version_info < (3, 8):
            logger.error("‚ùå Python 3.8+ requerido. Versi√≥n actual: {}.{}.{}".format(
                sys.version_info.major, sys.version_info.minor, sys.version_info.micro
            ))
            return False
        
        logger.info(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro} OK")
        return True
    
    def create_virtual_environment(self):
        """Crea el entorno virtual"""
        logger.info("üì¶ Configurando entorno virtual...")
        
        if self.venv_path.exists():
            logger.info("‚ö†Ô∏è Entorno virtual ya existe, eliminando...")
            shutil.rmtree(self.venv_path)
        
        try:
            subprocess.run([
                sys.executable, "-m", "venv", str(self.venv_path)
            ], check=True)
            logger.info("‚úÖ Entorno virtual creado")
            return True
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Error creando entorno virtual: {e}")
            return False
    
    def upgrade_pip(self):
        """Actualiza pip en el entorno virtual"""
        logger.info("üîÑ Actualizando pip...")
        
        try:
            subprocess.run([
                str(self.python_exe), "-m", "pip", "install", "--upgrade", "pip"
            ], check=True)
            logger.info("‚úÖ Pip actualizado")
            return True
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Error actualizando pip: {e}")
            return False
    
    def install_dependencies(self):
        """Instala las dependencias del proyecto"""
        logger.info("üìö Instalando dependencias...")
        
        requirements_file = self.project_root / "requirements.txt"
        if not requirements_file.exists():
            logger.error("‚ùå Archivo requirements.txt no encontrado")
            return False
        
        try:
            # Instalar dependencias b√°sicas primero
            basic_deps = [
                "wheel", "setuptools", "pip-tools"
            ]
            
            for dep in basic_deps:
                logger.info(f"üì¶ Instalando {dep}...")
                subprocess.run([
                    str(self.pip_exe), "install", dep
                ], check=True)
            
            # Instalar dependencias principales
            logger.info("üì¶ Instalando dependencias principales...")
            subprocess.run([
                str(self.pip_exe), "install", "-r", str(requirements_file)
            ], check=True)
            
            logger.info("‚úÖ Dependencias instaladas")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Error instalando dependencias: {e}")
            return False
    
    def create_directory_structure(self):
        """Crea la estructura de directorios necesaria"""
        logger.info("üìÅ Creando estructura de directorios...")
        
        directories = [
            "config",
            "data/raw",
            "data/processed", 
            "data/historical",
            "models/saved_models",
            "trading",
            "monitoring",
            "backtesting",
            "strategies",
            "utils",
            "tests",
            "logs",
            "backups",
            "docs"
        ]
        
        for directory in directories:
            dir_path = self.project_root / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ {directory}")
        
        logger.info("‚úÖ Estructura de directorios creada")
        return True
    
    def create_init_files(self):
        """Crea archivos __init__.py necesarios"""
        logger.info("üìÑ Creando archivos __init__.py...")
        
        init_dirs = [
            "config",
            "data", 
            "models",
            "trading",
            "monitoring",
            "backtesting",
            "strategies",
            "utils",
            "tests"
        ]
        
        for directory in init_dirs:
            init_file = self.project_root / directory / "__init__.py"
            if not init_file.exists():
                init_file.write_text('"""{}"""\n'.format(directory.title() + " module"))
                logger.info(f"üìÑ {directory}/__init__.py")
        
        logger.info("‚úÖ Archivos __init__.py creados")
        return True
    
    def setup_environment_file(self):
        """Configura el archivo .env"""
        logger.info("üîß Configurando archivo .env...")
        
        env_file = self.project_root / ".env"
        env_example = self.project_root / ".env.example"
        
        if not env_file.exists():
            if env_example.exists():
                shutil.copy2(env_example, env_file)
                logger.info("‚úÖ Archivo .env creado desde .env.example")
            else:
                # Crear .env b√°sico
                env_content = """# Trading Bot v10 - Environment Variables

# BITGET API CREDENTIALS
BITGET_API_KEY=your_api_key_here
BITGET_SECRET_KEY=your_secret_key_here
BITGET_PASSPHRASE=your_passphrase_here

# ENVIRONMENT
ENVIRONMENT=development
LOG_LEVEL=INFO

# DASHBOARD
DASHBOARD_HOST=127.0.0.1
DASHBOARD_PORT=8050
"""
                env_file.write_text(env_content)
                logger.info("‚úÖ Archivo .env b√°sico creado")
        else:
            logger.info("‚ÑπÔ∏è Archivo .env ya existe")
        
        logger.warning("‚ö†Ô∏è IMPORTANTE: Configura tus credenciales de Bitget en .env")
        return True
    
    def test_installation(self):
        """Prueba la instalaci√≥n"""
        logger.info("üß™ Probando instalaci√≥n...")
        
        test_script = """
import sys
import os
sys.path.append('{}')

try:
    # Test imports b√°sicos
    import pandas as pd
    import numpy as np
    import tensorflow as tf
    import ccxt
    import sqlalchemy
    
    print("‚úÖ Imports b√°sicos OK")
    
    # Test GPU (si disponible)
    gpus = tf.config.list_physical_devices('GPU')
    if gpus:
        print(f"‚úÖ GPU detectada: {{gpus[0].name}}")
    else:
        print("‚ÑπÔ∏è GPU no disponible (usando CPU)")
    
    # Test configuraci√≥n
    from config.settings import config
    print("‚úÖ Configuraci√≥n cargada")
    
    # Test base de datos
    from data.database import db_manager
    stats = db_manager.get_database_stats()
    print("‚úÖ Base de datos OK")
    
    print("\\nüéâ ¬°Instalaci√≥n exitosa!")
    
except ImportError as e:
    print(f"‚ùå Error de import: {{e}}")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå Error: {{e}}")
    sys.exit(1)
""".format(str(self.project_root))
        
        try:
            result = subprocess.run([
                str(self.python_exe), "-c", test_script
            ], capture_output=True, text=True, cwd=str(self.project_root))
            
            if result.returncode == 0:
                logger.info("‚úÖ Test de instalaci√≥n exitoso")
                print(result.stdout)
                return True
            else:
                logger.error("‚ùå Test de instalaci√≥n fall√≥")
                print(result.stderr)
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error ejecutando test: {e}")
            return False
    
    def create_startup_scripts(self):
        """Crea scripts de inicio"""
        logger.info("üöÄ Creando scripts de inicio...")
        
        # Script para Windows
        bat_content = f"""@echo off
echo ü§ñ Iniciando Trading Bot v10...
cd /d "{self.project_root}"
"{self.python_exe}" main.py %*
pause
"""
        
        bat_file = self.project_root / "start_bot.bat"
        bat_file.write_text(bat_content)
        logger.info("üìÑ start_bot.bat creado")
        
        # Script para activar entorno
        activate_content = f"""@echo off
echo üîß Activando entorno virtual...
cd /d "{self.project_root}"
call "{self.venv_path}/Scripts/activate.bat"
echo ‚úÖ Entorno activado. Usa 'python main.py' para iniciar el bot.
cmd /k
"""
        
        activate_file = self.project_root / "activate_env.bat"
        activate_file.write_text(activate_content)
        logger.info("üìÑ activate_env.bat creado")
        
        logger.info("‚úÖ Scripts de inicio creados")
        return True
    
    def print_final_instructions(self):
        """Imprime instrucciones finales"""
        instructions = f"""
üéâ ¬°INSTALACI√ìN COMPLETADA!

üìã PR√ìXIMOS PASOS:

1. üîê CONFIGURAR CREDENCIALES:
   - Edita el archivo .env
   - A√±ade tus credenciales de Bitget API
   
2. üß™ PROBAR EL BOT:
   - Ejecuta: start_bot.bat
   - O: activate_env.bat y luego 'python main.py'
   
3. üìä PRIMERAS PRUEBAS:
   - python main.py --collect-data     (recolectar datos)
   - python main.py --health-check     (verificar sistema)
   - python main.py --mode development (modo desarrollo)

üìÅ ARCHIVOS IMPORTANTES:
   - .env                    ‚Üí Credenciales (NO subir a Git)
   - config/user_settings.yaml ‚Üí Configuraci√≥n del bot
   - start_bot.bat          ‚Üí Inicio r√°pido
   - activate_env.bat       ‚Üí Activar entorno

‚ö†Ô∏è IMPORTANTE:
   - NUNCA subir .env a Git
   - Empezar en modo 'development' o 'paper-trading'
   - Leer config/user_settings.yaml para personalizar

üìö DOCUMENTACI√ìN:
   - README.md              ‚Üí Documentaci√≥n completa
   - docs/                  ‚Üí Documentaci√≥n adicional

üÜò SOPORTE:
   - Verificar logs/ si hay errores
   - Usar --verbose para debug detallado
   - Revisar config/user_settings.yaml

¬°Feliz trading! üöÄ
"""
        print(instructions)
    
    def full_install(self):
        """Instalaci√≥n completa"""
        logger.info("üöÄ Iniciando instalaci√≥n completa del Trading Bot v10...")
        
        steps = [
            ("Verificar Python", self.check_python_version),
            ("Crear entorno virtual", self.create_virtual_environment),
            ("Actualizar pip", self.upgrade_pip),
            ("Instalar dependencias", self.install_dependencies),
            ("Crear directorios", self.create_directory_structure),
            ("Crear archivos __init__", self.create_init_files),
            ("Configurar .env", self.setup_environment_file),
            ("Crear scripts", self.create_startup_scripts),
            ("Probar instalaci√≥n", self.test_installation)
        ]
        
        for step_name, step_function in steps:
            logger.info(f"üìã {step_name}...")
            if not step_function():
                logger.error(f"‚ùå Fall√≥: {step_name}")
                return False
        
        self.print_final_instructions()
        return True
    
    def develop_install(self):
        """Instalaci√≥n en modo desarrollo"""
        logger.info("üîß Instalaci√≥n en modo desarrollo...")
        
        # Solo instalar dependencias esenciales
        try:
            subprocess.run([
                sys.executable, "-m", "pip", "install", "-e", "."
            ], check=True)
            logger.info("‚úÖ Instalaci√≥n en modo desarrollo completada")
            return True
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Error en instalaci√≥n desarrollo: {e}")
            return False
    
    def run_tests(self):
        """Ejecuta los tests"""
        logger.info("üß™ Ejecutando tests...")
        
        try:
            subprocess.run([
                str(self.python_exe), "-m", "pytest", "tests/", "-v"
            ], check=True)
            logger.info("‚úÖ Tests completados")
            return True
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Tests fallaron: {e}")
            return False

def main():
    """Funci√≥n principal del script de setup"""
    setup = TradingBotSetup()
    
    if len(sys.argv) < 2:
        print("Uso: python setup.py [install|develop|test]")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "install":
        success = setup.full_install()
    elif command == "develop":
        success = setup.develop_install()
    elif command == "test":
        success = setup.run_tests()
    else:
        print(f"Comando desconocido: {command}")
        print("Comandos disponibles: install, develop, test")
        sys.exit(1)
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()