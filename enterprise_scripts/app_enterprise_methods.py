#!/usr/bin/env python3
"""
M√©todos adicionales para app_enterprise.py
"""

async def start_training_background(self):
    """Opci√≥n 6: Entrenamiento sin Dashboard (Background)"""
    print("\nü§ñ ENTRENAMIENTO SIN DASHBOARD (BACKGROUND)")
    print("=" * 50)
    
    try:
        await self._execute_operation(
            "start_training_background",
            self._start_background_training,
            timeout=7200  # 2 horas
        )
        
    except TimeoutError:
        print(f"\n‚è∞ El entrenamiento excedi√≥ el tiempo l√≠mite")
    except Exception as e:
        print(f"\n‚ùå Error iniciando entrenamiento: {e}")
        self.logger.error(f"Error in start_training_background: {e}")
    
    if not self.headless:
        input("\nPresiona Enter para continuar...")

async def _start_background_training(self):
    """Inicia entrenamiento en background"""
    # Verificar prerequisitos
    print("üîç Verificando prerequisitos...")
    
    # Verificar datos
    from data.database import db_manager
    stats = db_manager.get_data_summary_optimized()
    total_records = stats.get('total_records', 0)
    
    if total_records < 1000:
        print(f"‚ö†Ô∏è Datos insuficientes: {total_records:,} registros")
        if not self.headless:
            download = input("¬øDescargar datos hist√≥ricos primero? (s/n): ").strip().lower()
            if download == 's':
                await self.download_historical_data()
            else:
                print("‚ùå Cancelando entrenamiento")
                return
        else:
            print("‚ùå Cancelando entrenamiento (modo headless)")
            return
    else:
        print(f"‚úÖ Datos suficientes: {total_records:,} registros")
    
    # Configurar modo de entrenamiento
    mode = self._select_background_training_mode()
    
    # Configurar duraci√≥n del entrenamiento
    duration = self._select_training_duration()
    
    print(f"\nüéØ Configuraci√≥n del entrenamiento:")
    print(f"   Modo: {mode}")
    print(f"   Duraci√≥n: {duration}")
    print(f"   Dashboard: ‚ùå Deshabilitado")
    print()
    
    # Confirmar inicio
    if not self.headless:
        confirm = input("¬øIniciar entrenamiento en background? (s/n): ").strip().lower()
        if confirm != 's':
            print("‚ùå Entrenamiento cancelado")
            return
    
    print(f"\nüöÄ Iniciando entrenamiento en background...")
    print(f"‚è≥ El bot se ejecutar√° sin interfaz gr√°fica")
    print(f"üìä Puedes monitorear el progreso en los logs")
    print()
    
    # Iniciar entrenamiento en hilo separado
    training_thread = threading.Thread(
        target=self._start_background_training_thread,
        args=(mode, duration),
        daemon=True
    )
    training_thread.start()
    
    # Mostrar informaci√≥n de monitoreo
    print("üìã INFORMACI√ìN DE MONITOREO:")
    print(f"   Logs del agente: logs/agent_training.log")
    print(f"   Logs del sistema: logs/trading_bot.log")
    print(f"   Base de datos: data/trading_bot.db")
    print()
    print("üí° Para detener el entrenamiento:")
    print(f"   - Presiona Ctrl+C en esta ventana")
    print(f"   - O cierra esta aplicaci√≥n")
    print()
    
    # Mantener la aplicaci√≥n activa para monitoreo
    print("üîÑ Entrenamiento activo - Presiona Ctrl+C para detener")
    
    try:
        while True:
            time.sleep(5)
            # Mostrar estado cada 30 segundos
            if int(time.time()) % 30 == 0:
                print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')} - Entrenamiento en progreso...")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Deteniendo entrenamiento...")
        print("üîÑ El bot puede tardar unos segundos en detenerse completamente")

def _select_background_training_mode(self) -> str:
    """Selecciona modo de entrenamiento para background"""
    if self.headless:
        return "paper_trading"  # Modo por defecto para headless
    
    print("\nüéØ SELECCIONAR MODO DE ENTRENAMIENTO:")
    print("1. Paper Trading (Recomendado - Sin riesgo)")
    print("2. Backtesting (Pruebas hist√≥ricas)")
    print("3. Development (Desarrollo y debugging)")
    print("4. Continuous Learning (Aprendizaje continuo)")
    
    while True:
        try:
            choice = input("Selecciona modo (1-4): ").strip()
            if choice == "1":
                return "paper_trading"
            elif choice == "2":
                return "backtesting"
            elif choice == "3":
                return "development"
            elif choice == "4":
                return "continuous_learning"
            else:
                print("‚ö†Ô∏è Por favor selecciona 1, 2, 3 o 4")
        except KeyboardInterrupt:
            return "paper_trading"

def _select_training_duration(self) -> str:
    """Selecciona duraci√≥n del entrenamiento"""
    if self.headless:
        return "8h"  # Duraci√≥n por defecto para headless
    
    print("\n‚è∞ DURACI√ìN DEL ENTRENAMIENTO:")
    print("1. 1 hora")
    print("2. 4 horas")
    print("3. 8 horas")
    print("4. 12 horas")
    print("5. 24 horas")
    print("6. Indefinido (hasta detener manualmente)")
    
    while True:
        try:
            choice = input("Selecciona duraci√≥n (1-6): ").strip()
            duration_map = {
                "1": "1h",
                "2": "4h", 
                "3": "8h",
                "4": "12h",
                "5": "24h",
                "6": "indefinite"
            }
            if choice in duration_map:
                return duration_map[choice]
            else:
                print("‚ö†Ô∏è Por favor selecciona 1, 2, 3, 4, 5 o 6")
        except KeyboardInterrupt:
            return "8h"

def _start_background_training_thread(self, mode: str, duration: str):
    """Inicia entrenamiento en hilo separado sin dashboard"""
    try:
        # Cambiar al directorio del proyecto
        os.chdir(project_root)
        
        # Configurar variables de entorno
        env = os.environ.copy()
        env['TRADING_MODE'] = mode
        env['TRAINING_DURATION'] = duration
        env['BACKGROUND_MODE'] = 'true'
        env['DASHBOARD_ENABLED'] = 'false'
        
        # Ejecutar main.py sin dashboard
        cmd = [sys.executable, 'core/main_background.py', '--mode', mode, '--background', '--no-dashboard']
        
        print(f"üöÄ Ejecutando comando: {' '.join(cmd)}")
        print(f"üìÅ Directorio: {os.getcwd()}")
        print(f"‚è∞ Duraci√≥n: {duration}")
        print()
        
        process = subprocess.Popen(
            cmd,
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            universal_newlines=True
        )
        
        self.dashboard_process = process
        
        # Monitorear output con timestamps
        print("üìä Iniciando monitoreo del entrenamiento...")
        start_time = time.time()
        
        for line in iter(process.stdout.readline, ''):
            if line:
                timestamp = datetime.now().strftime('%H:%M:%S')
                print(f"[{timestamp}] {line.strip()}")
                
                # Mostrar progreso cada 5 minutos
                if int(time.time() - start_time) % 300 == 0:
                    elapsed = int(time.time() - start_time) // 60
                    print(f"‚è∞ Entrenamiento activo por {elapsed} minutos...")
                    
    except Exception as e:
        print(f"‚ùå Error en entrenamiento background: {e}")
        self.logger.error(f"Error in background training thread: {e}")
        import traceback
        traceback.print_exc()

async def performance_analysis(self):
    """Opci√≥n 7: An√°lisis de performance con m√©tricas detalladas"""
    print("\nüìà AN√ÅLISIS DE PERFORMANCE")
    print("=" * 30)
    
    try:
        await self._execute_operation(
            "performance_analysis",
            self._analyze_performance,
            timeout=300
        )
        
    except TimeoutError:
        print(f"\n‚è∞ El an√°lisis excedi√≥ el tiempo l√≠mite")
    except Exception as e:
        print(f"\n‚ùå Error en an√°lisis: {e}")
        self.logger.error(f"Error in performance_analysis: {e}")
    
    if not self.headless:
        input("\nPresiona Enter para continuar...")

async def _analyze_performance(self):
    """Analiza performance del sistema"""
    # Verificar si hay datos de trades
    from data.database import db_manager
    
    # Obtener estad√≠sticas b√°sicas
    stats = db_manager.get_data_summary_optimized()
    print("üìä Estad√≠sticas del sistema:")
    for key, value in stats.items():
        if isinstance(value, (int, float)):
            if 'count' in key.lower() or 'total' in key.lower():
                print(f"   {key}: {value:,}")
            else:
                print(f"   {key}: {value}")
        elif isinstance(value, dict):
            print(f"   {key}:")
            for sub_key, sub_value in value.items():
                if isinstance(sub_value, (int, float)):
                    print(f"     {sub_key}: {sub_value:,}")
                else:
                    print(f"     {sub_key}: {sub_value}")
        else:
            print(f"   {key}: {value}")
    
    # An√°lisis de trades si existe
    try:
        # Intentar an√°lisis avanzado
        print(f"\nüîç Ejecutando an√°lisis avanzado...")
        
        # Simular an√°lisis b√°sico
        symbols = db_manager.get_symbols_list()
        print(f"\nüìà S√≠mbolos disponibles: {len(symbols)}")
        
        for symbol in symbols[:4]:  # Mostrar primeros 4
            count = db_manager.get_market_data_count_fast(symbol)
            date_range = db_manager.get_data_date_range(symbol)
            
            if date_range[0] and date_range[1]:
                duration = (date_range[1] - date_range[0]).days
                print(f"   {symbol}: {count:,} registros ({duration} d√≠as)")
        
        print(f"\nüí° Para an√°lisis detallado, usa la opci√≥n 5 (Dashboard)")
        
    except Exception as e:
        print(f"‚ö†Ô∏è An√°lisis avanzado no disponible: {e}")

async def system_configuration(self):
    """Opci√≥n 8: Configurar sistema con validaciones"""
    print("\n‚öôÔ∏è CONFIGURACI√ìN DEL SISTEMA")
    print("=" * 35)
    
    try:
        await self._execute_operation(
            "system_configuration",
            self._show_system_config,
            timeout=60
        )
        
    except TimeoutError:
        print(f"\n‚è∞ La configuraci√≥n excedi√≥ el tiempo l√≠mite")
    except Exception as e:
        print(f"\n‚ùå Error accediendo configuraci√≥n: {e}")
        self.logger.error(f"Error in system_configuration: {e}")
    
    if not self.headless:
        input("\nPresiona Enter para continuar...")

async def _show_system_config(self):
    """Muestra configuraci√≥n del sistema"""
    from config.config_loader import user_config
    
    print("üìã Configuraci√≥n actual:")
    
    # Mostrar configuraciones clave
    bot_name = user_config.get_bot_name()
    trading_mode = user_config.get_trading_mode()
    
    # Obtener s√≠mbolos desde la configuraci√≥n
    bot_settings = user_config.get_value(['bot_settings'], {})
    symbols = bot_settings.get('main_symbols', ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT'])
    
    print(f"   Nombre del bot: {bot_name}")
    print(f"   Modo de trading: {trading_mode}")
    print(f"   S√≠mbolos: {', '.join(symbols)}")
    
    print(f"\nüìÅ Archivos de configuraci√≥n:")
    print(f"   config/user_settings.yaml")
    print(f"   .env")
    
    print(f"\nüí° Para modificar la configuraci√≥n:")
    print(f"   1. Edita config/user_settings.yaml")
    print(f"   2. Edita .env para credenciales")
    print(f"   3. Reinicia la aplicaci√≥n")

async def quick_tests(self):
    """Opci√≥n 9: Modo de pruebas r√°pidas con m√©tricas"""
    print("\nüß™ MODO DE PRUEBAS R√ÅPIDAS")
    print("=" * 30)
    
    try:
        await self._execute_operation(
            "quick_tests",
            self._run_quick_tests,
            timeout=120
        )
        
    except TimeoutError:
        print(f"\n‚è∞ Las pruebas excedieron el tiempo l√≠mite")
    except Exception as e:
        print(f"\n‚ùå Error en pruebas: {e}")
        self.logger.error(f"Error in quick_tests: {e}")
    
    if not self.headless:
        input("\nPresiona Enter para continuar...")

async def _run_quick_tests(self):
    """Ejecuta pruebas r√°pidas del sistema"""
    print("üîç Ejecutando pruebas del sistema...")
    
    tests = [
        ("Importaciones b√°sicas", self._test_imports),
        ("Conexi√≥n a base de datos", self._test_database),
        ("Configuraci√≥n", self._test_config),
        ("M√≥dulos de IA", self._test_ai_modules),
        ("Sistema Enterprise", self._test_enterprise_system)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            print(f"   {test_name}...", end=" ")
            result = await test_func()
            if result:
                print("‚úÖ")
                results.append(True)
            else:
                print("‚ùå")
                results.append(False)
        except Exception as e:
            print(f"‚ùå ({e})")
            results.append(False)
    
    # Resumen
    passed = sum(results)
    total = len(results)
    print(f"\nüìä Resultados: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ Sistema completamente funcional")
    elif passed >= total * 0.75:
        print("‚ö†Ô∏è Sistema mayormente funcional")
    else:
        print("‚ùå Sistema tiene problemas significativos")

async def _test_imports(self) -> bool:
    """Prueba importaciones b√°sicas"""
    try:
        import pandas as pd
        import numpy as np
        from data.database import db_manager
        from config.config_loader import user_config
        return True
    except ImportError:
        return False

async def _test_database(self) -> bool:
    """Prueba conexi√≥n a base de datos"""
    try:
        from data.database import db_manager
        stats = db_manager.get_data_summary_optimized()
        return isinstance(stats, dict)
    except Exception:
        return False

async def _test_config(self) -> bool:
    """Prueba configuraci√≥n"""
    try:
        from config.config_loader import user_config
        bot_name = user_config.get_bot_name()
        return isinstance(bot_name, str)
    except Exception:
        return False

async def _test_ai_modules(self) -> bool:
    """Prueba m√≥dulos de IA"""
    try:
        from models.adaptive_trainer import adaptive_trainer
        return True
    except ImportError:
        return False

async def _test_enterprise_system(self) -> bool:
    """Prueba sistema enterprise"""
    try:
        return self.enterprise_config is not None
    except Exception:
        return False

async def system_status(self):
    """Opci√≥n 10: Estado del sistema con m√©tricas detalladas"""
    print("\nüì± ESTADO DEL SISTEMA")
    print("=" * 25)
    
    try:
        await self._execute_operation(
            "system_status",
            self._show_system_status,
            timeout=30
        )
        
    except TimeoutError:
        print(f"\n‚è∞ El estado excedi√≥ el tiempo l√≠mite")
    except Exception as e:
        print(f"\n‚ùå Error obteniendo estado: {e}")
        self.logger.error(f"Error in system_status: {e}")
    
    if not self.headless:
        input("\nPresiona Enter para continuar...")

async def _show_system_status(self):
    """Muestra estado detallado del sistema"""
    # Estado general
    print("üñ•Ô∏è Sistema:")
    print(f"   Python: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    print(f"   Directorio: {project_root}")
    print(f"   Tiempo de ejecuci√≥n: {datetime.now().strftime('%H:%M:%S')}")
    
    # Estado de archivos cr√≠ticos
    print(f"\nüìÅ Archivos cr√≠ticos:")
    critical_files = [
        'core/main.py',
        'config/user_settings.yaml',
        '.env',
        'data/database.py',
        'models/adaptive_trainer.py'
    ]
    
    for file_path in critical_files:
        full_path = os.path.join(project_root, file_path)
        status = "‚úÖ" if os.path.exists(full_path) else "‚ùå"
        print(f"   {status} {file_path}")
    
    # Estado de base de datos
    try:
        from data.database import db_manager
        stats = db_manager.get_data_summary_optimized()
        print(f"\nüíæ Base de datos:")
        print(f"   Total registros: {stats.get('total_records', 0):,}")
        print(f"   Estado: ‚úÖ Conectada")
    except Exception as e:
        print(f"\nüíæ Base de datos: ‚ùå Error - {e}")
    
    # Procesos activos
    print(f"\nüîÑ Procesos:")
    if self.dashboard_process and self.dashboard_process.poll() is None:
        print(f"   Dashboard: ‚úÖ Activo (PID: {self.dashboard_process.pid})")
    else:
        print(f"   Dashboard: ‚ùå Inactivo")
    
    # M√©tricas de performance
    print(f"\nüìä M√©tricas de Performance:")
    metrics_summary = self.metrics.get_summary()
    print(f"   Tiempo total de ejecuci√≥n: {metrics_summary['total_runtime']:.2f}s")
    print(f"   Operaciones completadas: {metrics_summary['operations']}")
    print(f"   Tasa de √©xito: {metrics_summary['success_rate']:.1%}")
    print(f"   Tiempo promedio por operaci√≥n: {metrics_summary['avg_operation_time']:.2f}s")
    print(f"   Errores: {metrics_summary['error_count']}")
    print(f"   √âxitos: {metrics_summary['success_count']}")

async def enterprise_configuration(self):
    """Opci√≥n 11: Configuraci√≥n Enterprise"""
    print("\nüè¢ CONFIGURACI√ìN ENTERPRISE")
    print("=" * 35)
    
    if not self.enterprise_config:
        print("‚ùå Sistema Enterprise no disponible")
        print("üí° Aseg√∫rate de que core/enterprise_config.py est√© disponible")
        if not self.headless:
            input("\nPresiona Enter para continuar...")
        return
    
    try:
        await self._execute_operation(
            "enterprise_configuration",
            self._show_enterprise_config,
            timeout=60
        )
        
    except TimeoutError:
        print(f"\n‚è∞ La configuraci√≥n excedi√≥ el tiempo l√≠mite")
    except Exception as e:
        print(f"\n‚ùå Error en configuraci√≥n enterprise: {e}")
        self.logger.error(f"Error in enterprise_configuration: {e}")
    
    if not self.headless:
        input("\nPresiona Enter para continuar...")

async def _show_enterprise_config(self):
    """Muestra configuraci√≥n enterprise"""
    print("üîß Configuraci√≥n Enterprise disponible")
    print("üìä Funcionalidades:")
    print("   ‚úÖ Gesti√≥n segura de configuraci√≥n")
    print("   ‚úÖ Encriptaci√≥n de datos sensibles")
    print("   ‚úÖ Auditor√≠a y logging")
    print("   ‚úÖ Validaci√≥n robusta")
    print("   ‚úÖ Thread safety")
    
    # Mostrar estado de configuraci√≥n
    try:
        config_status = self.enterprise_config.get_configuration_status()
        print(f"\nüìã Estado de configuraci√≥n:")
        print(f"   Configuraciones cargadas: {config_status.get('loaded_configs', 0)}")
        print(f"   √öltima actualizaci√≥n: {config_status.get('last_update', 'Nunca')}")
        print(f"   Validaciones activas: {config_status.get('validations_active', False)}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error obteniendo estado: {e}")

async def show_metrics(self):
    """Opci√≥n 12: M√©tricas y Monitoreo"""
    print("\nüìä M√âTRICAS Y MONITOREO")
    print("=" * 30)
    
    try:
        await self._execute_operation(
            "show_metrics",
            self._display_metrics,
            timeout=30
        )
        
    except TimeoutError:
        print(f"\n‚è∞ Las m√©tricas excedieron el tiempo l√≠mite")
    except Exception as e:
        print(f"\n‚ùå Error mostrando m√©tricas: {e}")
        self.logger.error(f"Error in show_metrics: {e}")
    
    if not self.headless:
        input("\nPresiona Enter para continuar...")

async def _display_metrics(self):
    """Muestra m√©tricas detalladas"""
    metrics_summary = self.metrics.get_summary()
    
    print("üìà M√âTRICAS DE PERFORMANCE:")
    print(f"   Tiempo total de ejecuci√≥n: {metrics_summary['total_runtime']:.2f} segundos")
    print(f"   Operaciones completadas: {metrics_summary['operations']}")
    print(f"   Tasa de √©xito: {metrics_summary['success_rate']:.1%}")
    print(f"   Tiempo promedio por operaci√≥n: {metrics_summary['avg_operation_time']:.2f} segundos")
    print(f"   Total de errores: {metrics_summary['error_count']}")
    print(f"   Total de √©xitos: {metrics_summary['success_count']}")
    
    if self.metrics.operation_times:
        print(f"\n‚è±Ô∏è TIEMPOS POR OPERACI√ìN:")
        for operation, duration in sorted(self.metrics.operation_times.items(), key=lambda x: x[1], reverse=True):
            print(f"   {operation}: {duration:.2f}s")
    
    # M√©tricas del sistema
    print(f"\nüñ•Ô∏è M√âTRICAS DEL SISTEMA:")
    print(f"   Uso de memoria: {self._get_memory_usage():.2f} MB")
    print(f"   Procesos activos: {self._get_active_processes()}")
    
    # Estado de archivos de log
    print(f"\nüìù ARCHIVOS DE LOG:")
    log_files = [
        'logs/enterprise_app.log',
        'logs/trading_bot.log',
        'logs/agent_training.log'
    ]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            size = os.path.getsize(log_file) / 1024 / 1024  # MB
            print(f"   {log_file}: {size:.2f} MB")
        else:
            print(f"   {log_file}: No existe")

def _get_memory_usage(self) -> float:
    """Obtiene uso de memoria en MB"""
    try:
        import psutil
        process = psutil.Process()
        return process.memory_info().rss / 1024 / 1024
    except ImportError:
        return 0.0

def _get_active_processes(self) -> int:
    """Obtiene n√∫mero de procesos activos"""
    try:
        import psutil
        return len(psutil.pids())
    except ImportError:
        return 0

async def exit_application(self):
    """Opci√≥n 13: Salir de la aplicaci√≥n"""
    print("\nüëã Cerrando aplicaci√≥n...")
    
    # Mostrar resumen final
    metrics_summary = self.metrics.get_summary()
    print(f"\nüìä Resumen de la sesi√≥n:")
    print(f"   Tiempo total: {metrics_summary['total_runtime']:.2f} segundos")
    print(f"   Operaciones: {metrics_summary['operations']}")
    print(f"   Tasa de √©xito: {metrics_summary['success_rate']:.1%}")
    
    # Limpiar procesos
    self._cleanup_processes()
    
    print("‚úÖ Aplicaci√≥n cerrada correctamente")
    self.running = False

async def run(self):
    """Ejecuta el bucle principal de la aplicaci√≥n enterprise"""
    self.show_banner()
    
    while self.running:
        try:
            self.show_main_menu()
            choice = self.get_user_choice()
            
            # Obtener opci√≥n del men√∫
            option = self.menu_options.get(choice)
            if not option:
                print("\n‚ö†Ô∏è Opci√≥n no v√°lida. Por favor selecciona 1-13.")
                time.sleep(1)
                continue
            
            # Ejecutar operaci√≥n
            try:
                await self._execute_operation(
                    option.description,
                    option.handler,
                    timeout=option.timeout
                )
            except TimeoutError:
                print(f"\n‚è∞ La operaci√≥n '{option.description}' excedi√≥ el tiempo l√≠mite")
            except Exception as e:
                print(f"\n‚ùå Error en operaci√≥n: {e}")
                self.logger.error(f"Error in operation {option.description}: {e}")
            
            # Pausa en modo headless
            if self.headless and choice != "13":
                time.sleep(2)
                
        except KeyboardInterrupt:
            print("\n\nüëã Saliendo...")
            self.running = False
        except Exception as e:
            print(f"\n‚ùå Error inesperado: {e}")
            self.logger.error(f"Unexpected error in main loop: {e}")
            time.sleep(2)
    
    # Limpiar procesos
    self._cleanup_processes()

def main():
    """Funci√≥n principal con soporte para argumentos CLI"""
    parser = argparse.ArgumentParser(
        description="Trading Bot v10 - Enterprise Application",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos de uso:
  python app_enterprise.py                    # Modo interactivo
  python app_enterprise.py --option 1        # Descargar datos
  python app_enterprise.py --headless        # Modo headless
  python app_enterprise.py --option 5 --headless  # Entrenamiento headless
        """
    )
    
    parser.add_argument(
        '--option', 
        type=str, 
        help='Opci√≥n del men√∫ a ejecutar (1-13)'
    )
    parser.add_argument(
        '--headless', 
        action='store_true', 
        help='Ejecutar en modo headless (sin interacci√≥n del usuario)'
    )
    parser.add_argument(
        '--log-level', 
        type=str, 
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], 
        default='INFO',
        help='Nivel de logging'
    )
    parser.add_argument(
        '--timeout', 
        type=int, 
        default=300,
        help='Timeout por defecto para operaciones (segundos)'
    )
    
    args = parser.parse_args()
    
    try:
        # Configurar logging con nivel especificado
        global logger
        logger = setup_logging(args.log_level)
        
        # Crear aplicaci√≥n
        app = EnterpriseTradingBotApp(
            headless=args.headless,
            log_level=args.log_level
        )
        
        # Ejecutar opci√≥n espec√≠fica o men√∫ completo
        if args.option:
            # Ejecutar opci√≥n espec√≠fica
            option = app.menu_options.get(args.option)
            if option:
                print(f"Ejecutando: {option.description}")
                asyncio.run(option.handler())
            else:
                print(f"‚ùå Opci√≥n {args.option} no v√°lida")
                sys.exit(1)
        else:
            # Ejecutar men√∫ completo
            asyncio.run(app.run())
            
    except KeyboardInterrupt:
        print("\nüëã Aplicaci√≥n terminada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        logger.error(f"Critical error in main: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
