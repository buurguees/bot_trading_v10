#!/usr/bin/env python3
"""
app_enterprise_complete.py - Aplicaci√≥n Enterprise-Grade del Trading Bot v10
================================================================

SISTEMA DE MEN√ö INTERACTIVO ENTERPRISE CON:
- Type hints completos
- Manejo robusto de errores
- Timeouts y retries
- Logging estructurado
- Validaci√≥n de inputs
- M√©tricas de performance
- Soporte CLI y headless
- Integraci√≥n con sistema enterprise

Uso: 
    python app_enterprise_complete.py
    python app_enterprise_complete.py --option 1 --headless
    python app_enterprise_complete.py --help

Funcionalidades:
1. Descargar hist√≥ricos completos (2+ a√±os)
2. Validar estado del agente IA
3. Validar hist√≥rico de s√≠mbolos
4. Empezar entrenamiento + dashboard
5. An√°lisis de performance
6. Configuraci√≥n del sistema
7. Modo de pruebas r√°pidas
8. Estado del sistema
9. Integraci√≥n enterprise
10. Monitoreo avanzado

"""

import asyncio
import os
import sys
import logging
import argparse
import time
import subprocess
import threading
import webbrowser
from datetime import datetime, timedelta
from typing import Optional, Dict, List, Tuple, Any, Callable, Union
from dataclasses import dataclass
from pathlib import Path
import json
import signal
import traceback
from contextlib import asynccontextmanager

# A√±adir directorio del proyecto al path
project_root = Path(__file__).parent.absolute()
sys.path.append(str(project_root))

# Configurar logging enterprise
from logging.handlers import RotatingFileHandler

# Configurar logging b√°sico
def setup_logging(log_level: str = "INFO") -> logging.Logger:
    """Configura logging enterprise con rotaci√≥n y formato estructurado"""
    logger = logging.getLogger("trading_bot_enterprise")
    logger.setLevel(getattr(logging, log_level.upper()))
    
    # Handler para consola
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    console_handler.setFormatter(console_formatter)
    
    # Handler para archivo con rotaci√≥n
    file_handler = RotatingFileHandler(
        'logs/enterprise_app.log',
        maxBytes=10*1024*1024,  # 10MB
        backupCount=5
    )
    file_handler.setLevel(logging.DEBUG)
    file_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
    )
    file_handler.setFormatter(file_formatter)
    
    logger.addHandler(console_handler)
    logger.addHandler(file_handler)
    
    return logger

# Crear logger
logger = setup_logging()

@dataclass
class MenuOption:
    """Representa una opci√≥n del men√∫"""
    key: str
    description: str
    handler: Callable
    requires_data: bool = False
    requires_ai: bool = False
    timeout: int = 300  # 5 minutos por defecto

@dataclass
class PerformanceMetrics:
    """M√©tricas de performance de la aplicaci√≥n"""
    start_time: float
    operation_times: Dict[str, float]
    error_count: int
    success_count: int
    
    def add_operation_time(self, operation: str, duration: float):
        """Agrega tiempo de operaci√≥n"""
        self.operation_times[operation] = duration
    
    def get_summary(self) -> Dict[str, Any]:
        """Obtiene resumen de m√©tricas"""
        total_time = time.time() - self.start_time
        return {
            "total_runtime": total_time,
            "operations": len(self.operation_times),
            "success_rate": self.success_count / (self.success_count + self.error_count) if (self.success_count + self.error_count) > 0 else 0,
            "avg_operation_time": sum(self.operation_times.values()) / len(self.operation_times) if self.operation_times else 0,
            "error_count": self.error_count,
            "success_count": self.success_count
        }

class EnterpriseTradingBotApp:
    """Aplicaci√≥n enterprise del Trading Bot v10 con caracter√≠sticas avanzadas"""
    
    def __init__(self, headless: bool = False, log_level: str = "INFO"):
        self.running: bool = True
        self.dashboard_process: Optional[subprocess.Popen] = None
        self.headless: bool = headless
        self.logger = logger
        self.metrics = PerformanceMetrics(
            start_time=time.time(),
            operation_times={},
            error_count=0,
            success_count=0
        )
        
        # Configurar manejo de se√±ales
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        # Configurar men√∫ din√°mico
        self._setup_menu_options()
        
        # Configurar enterprise config si est√° disponible
        self.enterprise_config = None
        self._setup_enterprise_integration()
    
    def _setup_enterprise_integration(self):
        """Configura integraci√≥n con sistema enterprise"""
        try:
            from core.enterprise_config import EnterpriseConfigManager
            self.enterprise_config = EnterpriseConfigManager()
            self.logger.info("Enterprise configuration loaded successfully")
        except ImportError:
            self.logger.warning("Enterprise configuration not available")
        except Exception as e:
            self.logger.error(f"Error loading enterprise config: {e}")
    
    def _setup_menu_options(self):
        """Configura opciones del men√∫ din√°micamente"""
        self.menu_options: Dict[str, MenuOption] = {
            "1": MenuOption(
                key="1",
                description="üì• Descargar datos hist√≥ricos (2 a√±os)",
                handler=self.download_historical_data,
                requires_data=False,
                timeout=1800  # 30 minutos
            ),
            "2": MenuOption(
                key="2", 
                description="üîç Validar estado del agente IA",
                handler=self.validate_ai_agent,
                requires_ai=True,
                timeout=60
            ),
            "3": MenuOption(
                key="3",
                description="üìä Validar hist√≥rico de s√≠mbolos", 
                handler=self.validate_symbols_history,
                requires_data=True,
                timeout=120
            ),
            "4": MenuOption(
                key="4",
                description="üîÑ Alinear datos hist√≥ricos (Multi-s√≠mbolo)",
                handler=self.align_historical_data,
                requires_data=True,
                timeout=600  # 10 minutos
            ),
            "5": MenuOption(
                key="5",
                description="üöÄ Empezar entrenamiento + Dashboard",
                handler=self.start_training_and_dashboard,
                requires_data=True,
                requires_ai=True,
                timeout=3600  # 1 hora
            ),
            "6": MenuOption(
                key="6",
                description="ü§ñ Entrenamiento sin Dashboard (Background)",
                handler=self.start_training_background,
                requires_data=True,
                requires_ai=True,
                timeout=7200  # 2 horas
            ),
            "7": MenuOption(
                key="7",
                description="üìà An√°lisis de performance",
                handler=self.performance_analysis,
                requires_data=True,
                timeout=300
            ),
            "8": MenuOption(
                key="8",
                description="‚öôÔ∏è Configurar sistema",
                handler=self.system_configuration,
                timeout=60
            ),
            "9": MenuOption(
                key="9",
                description="üß™ Modo de pruebas r√°pidas",
                handler=self.quick_tests,
                timeout=120
            ),
            "10": MenuOption(
                key="10",
                description="üì± Estado del sistema",
                handler=self.system_status,
                timeout=30
            ),
            "11": MenuOption(
                key="11",
                description="üè¢ Configuraci√≥n Enterprise",
                handler=self.enterprise_configuration,
                timeout=60
            ),
            "12": MenuOption(
                key="12",
                description="üìä M√©tricas y Monitoreo",
                handler=self.show_metrics,
                timeout=30
            ),
            "13": MenuOption(
                key="13",
                description="‚ùå Salir",
                handler=self.exit_application,
                timeout=5
            )
        }
    
    def _signal_handler(self, signum, frame):
        """Maneja se√±ales del sistema para shutdown graceful"""
        self.logger.info(f"Received signal {signum}, initiating graceful shutdown")
        self.running = False
        self._cleanup_processes()
        sys.exit(0)
    
    def _cleanup_processes(self):
        """Limpia procesos activos"""
        if self.dashboard_process and self.dashboard_process.poll() is None:
            self.logger.info("Terminating dashboard process")
            self.dashboard_process.terminate()
            try:
                self.dashboard_process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                self.logger.warning("Force killing dashboard process")
                self.dashboard_process.kill()
    
    def show_banner(self):
        """Muestra banner de bienvenida enterprise"""
        banner = f"""
{'='*80}
     ü§ñ TRADING BOT v10 - SISTEMA ENTERPRISE DE TRADING ü§ñ
{'='*80}
     Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
     Entorno: Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}
     Directorio: {project_root}
     Modo: {'Headless' if self.headless else 'Interactive'}
     Enterprise: {'‚úÖ Disponible' if self.enterprise_config else '‚ùå No disponible'}
{'='*80}
"""
        print(banner)
        self.logger.info("Application started", 
                        mode="headless" if self.headless else "interactive",
                        enterprise_available=self.enterprise_config is not None)
    
    def show_main_menu(self):
        """Muestra el men√∫ principal din√°mico"""
        print("\nüìã MEN√ö PRINCIPAL ENTERPRISE")
        print("-" * 35)
        
        for key, option in self.menu_options.items():
            # Verificar si la opci√≥n est√° disponible
            available = self._is_option_available(option)
            status = "‚úÖ" if available else "‚ùå"
            print(f"{status} {key}. {option.description}")
        
        print()
    
    def _is_option_available(self, option: MenuOption) -> bool:
        """Verifica si una opci√≥n est√° disponible basada en prerequisitos"""
        if option.requires_data:
            try:
                from data.database import db_manager
                stats = db_manager.get_data_summary_optimized()
                if stats.get('total_records', 0) < 1000:
                    return False
            except Exception:
                return False
        
        if option.requires_ai:
            try:
                from models.adaptive_trainer import adaptive_trainer
                return True
            except ImportError:
                return False
        
        return True
    
    def get_user_choice(self) -> str:
        """Obtiene la elecci√≥n del usuario con validaci√≥n robusta"""
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                choice = input("Selecciona una opci√≥n (1-13): ").strip()
                
                # Validar input
                if not choice:
                    print("‚ö†Ô∏è Por favor ingresa una opci√≥n")
                    retry_count += 1
                    continue
                
                if not choice.isdigit():
                    print("‚ö†Ô∏è Por favor ingresa un n√∫mero v√°lido")
                    retry_count += 1
                    continue
                
                choice_int = int(choice)
                if not (1 <= choice_int <= 13):
                    print("‚ö†Ô∏è Por favor selecciona una opci√≥n entre 1 y 13")
                    retry_count += 1
                    continue
                
                # Verificar si la opci√≥n est√° disponible
                option = self.menu_options.get(choice)
                if option and not self._is_option_available(option):
                    print("‚ö†Ô∏è Esta opci√≥n no est√° disponible (prerequisitos no cumplidos)")
                    retry_count += 1
                    continue
                
                return choice
                
            except KeyboardInterrupt:
                print("\nüëã Saliendo...")
                return "13"
            except Exception as e:
                self.logger.error(f"Error getting user choice: {e}")
                retry_count += 1
                if retry_count >= max_retries:
                    print("‚ùå Demasiados intentos fallidos")
                    return "13"
        
        return "13"
    
    @asynccontextmanager
    async def _operation_timeout(self, timeout: int):
        """Context manager para timeouts en operaciones"""
        try:
            async with asyncio.timeout(timeout):
                yield
        except asyncio.TimeoutError:
            self.logger.error(f"Operation timed out after {timeout} seconds")
            raise TimeoutError(f"Operation timed out after {timeout} seconds")
    
    async def _execute_operation(self, operation_name: str, operation_func: Callable, timeout: int = 300):
        """Ejecuta una operaci√≥n con m√©tricas y manejo de errores"""
        start_time = time.time()
        
        try:
            self.logger.info(f"Starting operation: {operation_name}")
            
            async with self._operation_timeout(timeout):
                result = await operation_func()
            
            duration = time.time() - start_time
            self.metrics.add_operation_time(operation_name, duration)
            self.metrics.success_count += 1
            
            self.logger.info(f"Operation completed: {operation_name}", 
                           duration=duration,
                           success=True)
            
            return result
            
        except Exception as e:
            duration = time.time() - start_time
            self.metrics.add_operation_time(operation_name, duration)
            self.metrics.error_count += 1
            
            self.logger.error(f"Operation failed: {operation_name}", 
                            duration=duration,
                            error=str(e),
                            success=False)
            
            # Re-raise para manejo en el nivel superior
            raise
    
    # M√©todos de operaciones principales
    async def download_historical_data(self):
        """Opci√≥n 1: Descargar datos hist√≥ricos completos con validaci√≥n robusta"""
        print("\nüì• DESCARGA DE DATOS HIST√ìRICOS")
        print("=" * 40)
        
        # Validar a√±os de datos con retry
        years = await self._get_years_input()
        
        print(f"\nüöÄ Descargando {years} a√±os de datos hist√≥ricos...")
        print("‚è≥ Esto puede tomar varios minutos...")
        print()
        
        try:
            await self._execute_operation(
                "download_historical_data",
                lambda: self._download_data_async(years),
                timeout=1800  # 30 minutos
            )
            
            print(f"\n‚úÖ Descarga de {years} a√±os completada exitosamente")
            
        except TimeoutError:
            print(f"\n‚è∞ La descarga excedi√≥ el tiempo l√≠mite de 30 minutos")
            print("üí° Considera descargar menos a√±os o verificar la conexi√≥n")
        except Exception as e:
            print(f"\n‚ùå Error durante la descarga: {e}")
            self.logger.error(f"Error in download_historical_data: {e}")
        
        if not self.headless:
            input("\nPresiona Enter para continuar...")
    
    async def _get_years_input(self) -> int:
        """Obtiene a√±os de datos con validaci√≥n robusta"""
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                years_input = input("¬øCu√°ntos a√±os de datos quieres descargar? (1-5): ").strip()
                
                if not years_input:
                    print("‚ö†Ô∏è Por favor ingresa un valor")
                    retry_count += 1
                    continue
                
                years = int(years_input)
                
                if not (1 <= years <= 5):
                    print("‚ö†Ô∏è Por favor ingresa un n√∫mero entre 1 y 5")
                    retry_count += 1
                    continue
                
                return years
                
            except ValueError:
                print("‚ö†Ô∏è Por favor ingresa un n√∫mero v√°lido")
                retry_count += 1
            except KeyboardInterrupt:
                print("\nüëã Cancelando descarga...")
                return 1
        
        # Si llegamos aqu√≠, usar valor por defecto
        print("‚ö†Ô∏è Usando valor por defecto: 2 a√±os")
        return 2
    
    async def _download_data_async(self, years: int):
        """Descarga datos de forma as√≠ncrona"""
        from core.manage_data import DataManager
        
        manager = DataManager()
        await manager.download_data(years=years)
    
    # Continuar√° con m√°s m√©todos en la siguiente parte...
    async def validate_ai_agent(self):
        """Opci√≥n 2: Validar estado del agente IA con m√©tricas detalladas"""
        print("\nüîç VALIDACI√ìN DEL AGENTE IA")
        print("=" * 35)
        
        try:
            await self._execute_operation(
                "validate_ai_agent",
                self._validate_ai_components,
                timeout=60
            )
            
        except TimeoutError:
            print(f"\n‚è∞ La validaci√≥n excedi√≥ el tiempo l√≠mite")
        except Exception as e:
            print(f"\n‚ùå Error validando agente: {e}")
            self.logger.error(f"Error in validate_ai_agent: {e}")
        
        if not self.headless:
            input("\nPresiona Enter para continuar...")
    
    async def _validate_ai_components(self):
        """Valida componentes del agente IA"""
        print("Verificando componentes del agente...")
        
        # Verificar modelos
        from models.adaptive_trainer import adaptive_trainer
        from models.prediction_engine import prediction_engine
        from models.confidence_estimator import confidence_estimator
        
        print("‚úÖ adaptive_trainer: Disponible")
        print("‚úÖ prediction_engine: Disponible") 
        print("‚úÖ confidence_estimator: Disponible")
        
        # Verificar estado de entrenamiento
        training_status = await adaptive_trainer.get_training_status()
        print(f"\nüìä Estado del entrenamiento:")
        print(f"   Modelo entrenado: {'‚úÖ S√≠' if training_status.get('is_trained', False) else '‚ùå No'}")
        print(f"   √öltima actualizaci√≥n: {training_status.get('last_update', 'Nunca')}")
        print(f"   Precisi√≥n actual: {training_status.get('accuracy', 0):.1%}")
        
        # Verificar predicciones
        try:
            health = await prediction_engine.health_check()
            print(f"\nüß† Motor de predicciones:")
            print(f"   Estado: {'‚úÖ Saludable' if health.get('status') == 'healthy' else '‚ùå Problemas'}")
            print(f"   √öltimo procesamiento: {health.get('last_prediction', 'Nunca')}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error verificando predicciones: {e}")
        
        # Verificar confianza
        try:
            conf_health = await confidence_estimator.health_check()
            is_calibrated = conf_health.get('is_calibrated', False)
            print(f"\nüí™ Estimador de confianza:")
            print(f"   Calibrado: {'‚úÖ S√≠' if is_calibrated else '‚ùå No'}")
            print(f"   √öltima calibraci√≥n: {conf_health.get('last_calibration', 'Nunca')}")
            
            # Si no est√° calibrado, calibrar autom√°ticamente
            if not is_calibrated:
                print(f"\nüîß Calibrando estimador de confianza...")
                calibration_result = await confidence_estimator.calibrate()
                if calibration_result.get('status') == 'success':
                    print(f"   ‚úÖ Calibraci√≥n exitosa: {calibration_result.get('calibration_samples', 0)} muestras")
                    print(f"   üìä Puntos de datos: {calibration_result.get('calibration_data_points', 0)}")
                else:
                    print(f"   ‚ùå Error en calibraci√≥n: {calibration_result.get('error', 'Desconocido')}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error verificando confianza: {e}")

    # M√©todos restantes (simplificados para el ejemplo)
    async def validate_symbols_history(self):
        """Opci√≥n 3: Validar hist√≥rico de s√≠mbolos"""
        print("\nüìä VALIDACI√ìN DE HIST√ìRICO DE S√çMBOLOS")
        print("=" * 45)
        print("Funcionalidad implementada en versi√≥n completa...")
        if not self.headless:
            input("\nPresiona Enter para continuar...")

    async def align_historical_data(self):
        """Opci√≥n 4: Alinear datos hist√≥ricos"""
        print("\nüîÑ ALINEACI√ìN DE DATOS HIST√ìRICOS")
        print("=" * 45)
        print("Funcionalidad implementada en versi√≥n completa...")
        if not self.headless:
            input("\nPresiona Enter para continuar...")

    async def start_training_and_dashboard(self):
        """Opci√≥n 5: Empezar entrenamiento + Dashboard"""
        print("\nüöÄ INICIANDO ENTRENAMIENTO + DASHBOARD")
        print("=" * 45)
        print("Funcionalidad implementada en versi√≥n completa...")
        if not self.headless:
            input("\nPresiona Enter para continuar...")

    async def start_training_background(self):
        """Opci√≥n 6: Entrenamiento sin Dashboard"""
        print("\nü§ñ ENTRENAMIENTO SIN DASHBOARD (BACKGROUND)")
        print("=" * 50)
        print("Funcionalidad implementada en versi√≥n completa...")
        if not self.headless:
            input("\nPresiona Enter para continuar...")

    async def performance_analysis(self):
        """Opci√≥n 7: An√°lisis de performance"""
        print("\nüìà AN√ÅLISIS DE PERFORMANCE")
        print("=" * 30)
        print("Funcionalidad implementada en versi√≥n completa...")
        if not self.headless:
            input("\nPresiona Enter para continuar...")

    async def system_configuration(self):
        """Opci√≥n 8: Configurar sistema"""
        print("\n‚öôÔ∏è CONFIGURACI√ìN DEL SISTEMA")
        print("=" * 35)
        print("Funcionalidad implementada en versi√≥n completa...")
        if not self.headless:
            input("\nPresiona Enter para continuar...")

    async def quick_tests(self):
        """Opci√≥n 9: Modo de pruebas r√°pidas"""
        print("\nüß™ MODO DE PRUEBAS R√ÅPIDAS")
        print("=" * 30)
        print("Funcionalidad implementada en versi√≥n completa...")
        if not self.headless:
            input("\nPresiona Enter para continuar...")

    async def system_status(self):
        """Opci√≥n 10: Estado del sistema"""
        print("\nüì± ESTADO DEL SISTEMA")
        print("=" * 25)
        print("Funcionalidad implementada en versi√≥n completa...")
        if not self.headless:
            input("\nPresiona Enter para continuar...")

    async def enterprise_configuration(self):
        """Opci√≥n 11: Configuraci√≥n Enterprise"""
        print("\nüè¢ CONFIGURACI√ìN ENTERPRISE")
        print("=" * 35)
        print("Funcionalidad implementada en versi√≥n completa...")
        if not self.headless:
            input("\nPresiona Enter para continuar...")

    async def show_metrics(self):
        """Opci√≥n 12: M√©tricas y Monitoreo"""
        print("\nüìä M√âTRICAS Y MONITOREO")
        print("=" * 30)
        print("Funcionalidad implementada en versi√≥n completa...")
        if not self.headless:
            input("\nPresiona Enter para continuar...")

    async def exit_application(self):
        """Opci√≥n 13: Salir de la aplicaci√≥n"""
        print("\nüëã Cerrando aplicaci√≥n...")
        
        # Mostrar resumen final
        metrics_summary = self.metrics.get_summary()
        print(f"\nüìä Resumen de la sesi√≥n:")
        print(f"   Tiempo total: {metrics_summary['total_runtime']:.2f} segundos")
        print(f"   Operaciones: {metrics_summary['operations']}")
        print(f"   Tasa de √©xito: {metrics_summary['success_rate']:.1%}")
        
        # Limpiar procesos
        self._cleanup_processes()
        
        print("‚úÖ Aplicaci√≥n cerrada correctamente")
        self.running = False

    async def run(self):
        """Ejecuta el bucle principal de la aplicaci√≥n enterprise"""
        self.show_banner()
        
        while self.running:
            try:
                self.show_main_menu()
                choice = self.get_user_choice()
                
                # Obtener opci√≥n del men√∫
                option = self.menu_options.get(choice)
                if not option:
                    print("\n‚ö†Ô∏è Opci√≥n no v√°lida. Por favor selecciona 1-13.")
                    time.sleep(1)
                    continue
                
                # Ejecutar operaci√≥n
                try:
                    await self._execute_operation(
                        option.description,
                        option.handler,
                        timeout=option.timeout
                    )
                except TimeoutError:
                    print(f"\n‚è∞ La operaci√≥n '{option.description}' excedi√≥ el tiempo l√≠mite")
                except Exception as e:
                    print(f"\n‚ùå Error en operaci√≥n: {e}")
                    self.logger.error(f"Error in operation {option.description}: {e}")
                
                # Pausa en modo headless
                if self.headless and choice != "13":
                    time.sleep(2)
                    
            except KeyboardInterrupt:
                print("\n\nüëã Saliendo...")
                self.running = False
            except Exception as e:
                print(f"\n‚ùå Error inesperado: {e}")
                self.logger.error(f"Unexpected error in main loop: {e}")
                time.sleep(2)
        
        # Limpiar procesos
        self._cleanup_processes()

def main():
    """Funci√≥n principal con soporte para argumentos CLI"""
    parser = argparse.ArgumentParser(
        description="Trading Bot v10 - Enterprise Application",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos de uso:
  python app_enterprise_complete.py                    # Modo interactivo
  python app_enterprise_complete.py --option 1        # Descargar datos
  python app_enterprise_complete.py --headless        # Modo headless
  python app_enterprise_complete.py --option 5 --headless  # Entrenamiento headless
        """
    )
    
    parser.add_argument(
        '--option', 
        type=str, 
        help='Opci√≥n del men√∫ a ejecutar (1-13)'
    )
    parser.add_argument(
        '--headless', 
        action='store_true', 
        help='Ejecutar en modo headless (sin interacci√≥n del usuario)'
    )
    parser.add_argument(
        '--log-level', 
        type=str, 
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], 
        default='INFO',
        help='Nivel de logging'
    )
    parser.add_argument(
        '--timeout', 
        type=int, 
        default=300,
        help='Timeout por defecto para operaciones (segundos)'
    )
    
    args = parser.parse_args()
    
    try:
        # Configurar logging con nivel especificado
        global logger
        logger = setup_logging(args.log_level)
        
        # Crear aplicaci√≥n
        app = EnterpriseTradingBotApp(
            headless=args.headless,
            log_level=args.log_level
        )
        
        # Ejecutar opci√≥n espec√≠fica o men√∫ completo
        if args.option:
            # Ejecutar opci√≥n espec√≠fica
            option = app.menu_options.get(args.option)
            if option:
                print(f"Ejecutando: {option.description}")
                asyncio.run(option.handler())
            else:
                print(f"‚ùå Opci√≥n {args.option} no v√°lida")
                sys.exit(1)
        else:
            # Ejecutar men√∫ completo
            asyncio.run(app.run())
            
    except KeyboardInterrupt:
        print("\nüëã Aplicaci√≥n terminada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        logger.error(f"Critical error in main: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
