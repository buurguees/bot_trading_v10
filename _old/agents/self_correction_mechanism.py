"""
üîß SelfCorrectionMechanism - Mecanismo de Autocorrecci√≥n

Sistema que permite al agente detectar, analizar y corregir sus propios errores
de forma aut√≥noma, mejorando continuamente su performance y adapt√°ndose
a condiciones cambiantes.

Caracter√≠sticas:
- Detecci√≥n autom√°tica de errores y anomal√≠as
- An√°lisis de causas ra√≠z de problemas
- Correcci√≥n proactiva de par√°metros y estrategias
- Validaci√≥n de decisiones antes de ejecuci√≥n
- Recuperaci√≥n autom√°tica de errores cr√≠ticos
- Monitoreo continuo de performance

Autor: Alex B
Fecha: 2025-01-07
"""

import asyncio
import logging
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum
import traceback

# Imports del sistema existente
from config.config_loader import user_config

logger = logging.getLogger(__name__)

class ErrorType(Enum):
    """Tipos de errores que puede detectar el sistema"""
    PREDICTION_ERROR = "prediction_error"
    DECISION_ERROR = "decision_error"
    EXECUTION_ERROR = "execution_error"
    PERFORMANCE_ERROR = "performance_error"
    SYSTEM_ERROR = "system_error"
    DATA_ERROR = "data_error"
    CONFIGURATION_ERROR = "configuration_error"

class CorrectionType(Enum):
    """Tipos de correcciones que puede aplicar"""
    PARAMETER_ADJUSTMENT = "parameter_adjustment"
    STRATEGY_MODIFICATION = "strategy_modification"
    THRESHOLD_UPDATE = "threshold_update"
    FILTER_ADDITION = "filter_addition"
    FALLBACK_ACTIVATION = "fallback_activation"
    SYSTEM_RESTART = "system_restart"

@dataclass
class Error:
    """Error detectado por el sistema"""
    error_type: ErrorType
    severity: str  # low, medium, high, critical
    description: str
    context: Dict
    timestamp: datetime
    frequency: int = 1
    last_occurrence: Optional[datetime] = None

@dataclass
class Correction:
    """Correcci√≥n aplicada por el sistema"""
    correction_type: CorrectionType
    error_id: str
    description: str
    parameters: Dict
    timestamp: datetime
    success: bool = False
    impact: str = "unknown"

@dataclass
class ValidationResult:
    """Resultado de validaci√≥n de decisi√≥n"""
    is_valid: bool
    confidence: float
    warnings: List[str]
    errors: List[str]
    recommendations: List[str]

class SelfCorrectionMechanism:
    """
    üîß Mecanismo de Autocorrecci√≥n
    
    Permite al agente detectar, analizar y corregir sus propios errores
    de forma aut√≥noma, mejorando continuamente su performance.
    """
    
    def __init__(self):
        """Inicializa el mecanismo de autocorrecci√≥n"""
        self.config = user_config
        self.correction_config = self.config.get_value(['ai_agent', 'self_correction'], {})
        
        # Par√°metros de detecci√≥n
        self.error_thresholds = {
            'prediction_accuracy': 0.6,
            'decision_confidence': 0.5,
            'performance_degradation': 0.2,
            'system_stability': 0.8
        }
        
        # Historial de errores y correcciones
        self.error_history = []
        self.correction_history = []
        self.validation_history = []
        
        # M√©tricas de correcci√≥n
        self.correction_metrics = {
            'total_errors_detected': 0,
            'total_corrections_applied': 0,
            'successful_corrections': 0,
            'failed_corrections': 0,
            'error_reduction_rate': 0.0,
            'correction_accuracy': 0.0
        }
        
        # Estado del sistema
        self.is_monitoring = False
        self.correction_mode = "automatic"  # automatic, manual, disabled
        self.last_health_check = datetime.now()
        
        logger.info("üîß SelfCorrectionMechanism inicializado")
    
    async def initialize(self) -> None:
        """Inicializa el mecanismo de autocorrecci√≥n"""
        try:
            # Cargar configuraci√≥n de correcci√≥n
            await self._load_correction_config()
            
            # Inicializar monitoreo
            await self._initialize_monitoring()
            
            # Cargar historial de errores
            await self._load_error_history()
            
            self.is_monitoring = True
            logger.info("‚úÖ Mecanismo de autocorrecci√≥n inicializado")
            
        except Exception as e:
            logger.error(f"‚ùå Error inicializando autocorrecci√≥n: {e}")
            raise
    
    async def validate_decision(self, decision: Dict, analysis: Dict) -> Optional[Dict]:
        """
        Valida una decisi√≥n antes de ejecutarla
        
        Args:
            decision: Decisi√≥n a validar
            analysis: An√°lisis del mercado
            
        Returns:
            Dict: Decisi√≥n validada o None si es inv√°lida
        """
        try:
            # Realizar validaci√≥n completa
            validation_result = await self._perform_decision_validation(decision, analysis)
            
            # Guardar resultado de validaci√≥n
            self.validation_history.append({
                'decision': decision,
                'validation': validation_result,
                'timestamp': datetime.now()
            })
            
            # Si la decisi√≥n es v√°lida, devolverla
            if validation_result.is_valid:
                logger.info(f"‚úÖ Decisi√≥n validada: {decision.get('action', 'UNKNOWN')}")
                return decision
            else:
                logger.warning(f"‚ö†Ô∏è Decisi√≥n rechazada: {validation_result.errors}")
                
                # Intentar correcci√≥n autom√°tica
                corrected_decision = await self._attempt_decision_correction(decision, validation_result)
                if corrected_decision:
                    logger.info("üîß Decisi√≥n corregida autom√°ticamente")
                    return corrected_decision
                
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error validando decisi√≥n: {e}")
            return None
    
    async def detect_errors(self, context: Dict) -> List[Error]:
        """
        Detecta errores en el contexto dado
        
        Args:
            context: Contexto a analizar (performance, decisiones, etc.)
            
        Returns:
            List[Error]: Errores detectados
        """
        try:
            errors = []
            
            # Detectar errores de performance
            performance_errors = await self._detect_performance_errors(context)
            errors.extend(performance_errors)
            
            # Detectar errores de predicci√≥n
            prediction_errors = await self._detect_prediction_errors(context)
            errors.extend(prediction_errors)
            
            # Detectar errores de decisi√≥n
            decision_errors = await self._detect_decision_errors(context)
            errors.extend(decision_errors)
            
            # Detectar errores del sistema
            system_errors = await self._detect_system_errors(context)
            errors.extend(system_errors)
            
            # Agregar errores al historial
            for error in errors:
                self.error_history.append(error)
                self.correction_metrics['total_errors_detected'] += 1
            
            if errors:
                logger.warning(f"üö® Detectados {len(errors)} errores")
            
            return errors
            
        except Exception as e:
            logger.error(f"‚ùå Error detectando errores: {e}")
            return []
    
    async def apply_corrections(self, errors: List[Error]) -> List[Correction]:
        """
        Aplica correcciones para los errores detectados
        
        Args:
            errors: Lista de errores a corregir
            
        Returns:
            List[Correction]: Correcciones aplicadas
        """
        try:
            corrections = []
            
            for error in errors:
                # Generar correcci√≥n para el error
                correction = await self._generate_correction(error)
                if correction:
                    # Aplicar correcci√≥n
                    success = await self._apply_correction(correction)
                    correction.success = success
                    
                    corrections.append(correction)
                    self.correction_history.append(correction)
                    
                    if success:
                        self.correction_metrics['successful_corrections'] += 1
                        logger.info(f"‚úÖ Correcci√≥n aplicada: {correction.description}")
                    else:
                        self.correction_metrics['failed_corrections'] += 1
                        logger.error(f"‚ùå Correcci√≥n fall√≥: {correction.description}")
            
            self.correction_metrics['total_corrections_applied'] += len(corrections)
            
            # Actualizar m√©tricas de correcci√≥n
            await self._update_correction_metrics()
            
            return corrections
            
        except Exception as e:
            logger.error(f"‚ùå Error aplicando correcciones: {e}")
            return []
    
    async def handle_critical_error(self, error: Exception) -> bool:
        """
        Maneja errores cr√≠ticos del sistema
        
        Args:
            error: Error cr√≠tico ocurrido
            
        Returns:
            bool: True si se recuper√≥ exitosamente
        """
        try:
            logger.critical(f"üö® Error cr√≠tico detectado: {error}")
            
            # Crear error cr√≠tico
            critical_error = Error(
                error_type=ErrorType.SYSTEM_ERROR,
                severity="critical",
                description=str(error),
                context={
                    'traceback': traceback.format_exc(),
                    'timestamp': datetime.now()
                },
                timestamp=datetime.now()
            )
            
            # Agregar al historial
            self.error_history.append(critical_error)
            
            # Intentar recuperaci√≥n autom√°tica
            recovery_success = await self._attempt_system_recovery(critical_error)
            
            if recovery_success:
                logger.info("‚úÖ Sistema recuperado exitosamente")
                return True
            else:
                logger.error("‚ùå No se pudo recuperar el sistema autom√°ticamente")
                return False
                
        except Exception as e:
            logger.critical(f"üí• Error en manejo de error cr√≠tico: {e}")
            return False
    
    async def _perform_decision_validation(self, decision: Dict, analysis: Dict) -> ValidationResult:
        """Realiza validaci√≥n completa de una decisi√≥n"""
        try:
            warnings = []
            errors = []
            recommendations = []
            
            # Validar confianza m√≠nima
            confidence = decision.get('confidence', 0)
            if confidence < self.error_thresholds['decision_confidence']:
                errors.append(f"Confianza insuficiente: {confidence:.2f}")
            
            # Validar acci√≥n
            action = decision.get('action', '')
            if action not in ['BUY', 'SELL', 'HOLD']:
                errors.append(f"Acci√≥n inv√°lida: {action}")
            
            # Validar contexto de mercado
            market_regime = analysis.get('market_regime', 'unknown')
            if market_regime == 'volatile' and confidence < 0.8:
                warnings.append("Alta volatilidad - considerar mayor confianza")
            
            # Validar riesgo
            risk_level = analysis.get('risk_level', 'medium')
            if risk_level == 'high' and confidence < 0.9:
                warnings.append("Alto riesgo - considerar mayor confianza")
            
            # Validar coherencia con an√°lisis
            if analysis.get('trend_direction') == 'bearish' and action == 'BUY':
                warnings.append("Compra en tendencia bajista")
            elif analysis.get('trend_direction') == 'bullish' and action == 'SELL':
                warnings.append("Venta en tendencia alcista")
            
            # Generar recomendaciones
            if confidence > 0.8 and len(warnings) == 0:
                recommendations.append("Decisi√≥n de alta calidad")
            elif len(warnings) > 0:
                recommendations.append("Revisar advertencias antes de ejecutar")
            
            # Determinar validez
            is_valid = len(errors) == 0
            overall_confidence = confidence if is_valid else 0.0
            
            return ValidationResult(
                is_valid=is_valid,
                confidence=overall_confidence,
                warnings=warnings,
                errors=errors,
                recommendations=recommendations
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error en validaci√≥n: {e}")
            return ValidationResult(
                is_valid=False,
                confidence=0.0,
                warnings=[],
                errors=[f"Error en validaci√≥n: {str(e)}"],
                recommendations=[]
            )
    
    async def _attempt_decision_correction(self, decision: Dict, validation: ValidationResult) -> Optional[Dict]:
        """Intenta corregir una decisi√≥n inv√°lida"""
        try:
            corrected_decision = decision.copy()
            
            # Corregir confianza baja
            if decision.get('confidence', 0) < self.error_thresholds['decision_confidence']:
                corrected_decision['confidence'] = self.error_thresholds['decision_confidence']
                corrected_decision['reasoning'] += " | Confianza ajustada autom√°ticamente"
            
            # Cambiar a HOLD si hay errores cr√≠ticos
            if any('inv√°lida' in error for error in validation.errors):
                corrected_decision['action'] = 'HOLD'
                corrected_decision['reasoning'] += " | Cambiado a HOLD por validaci√≥n"
            
            # Aplicar filtros adicionales
            if 'volatilidad' in ' '.join(validation.warnings):
                corrected_decision['confidence'] = min(corrected_decision['confidence'] + 0.1, 1.0)
            
            return corrected_decision
            
        except Exception as e:
            logger.error(f"‚ùå Error corrigiendo decisi√≥n: {e}")
            return None
    
    async def _detect_performance_errors(self, context: Dict) -> List[Error]:
        """Detecta errores de performance"""
        try:
            errors = []
            
            # Verificar m√©tricas de performance
            performance = context.get('performance', {})
            
            # Error de accuracy baja
            accuracy = performance.get('accuracy', 1.0)
            if accuracy < self.error_thresholds['prediction_accuracy']:
                error = Error(
                    error_type=ErrorType.PERFORMANCE_ERROR,
                    severity="high",
                    description=f"Accuracy baja: {accuracy:.2f}",
                    context=performance,
                    timestamp=datetime.now()
                )
                errors.append(error)
            
            # Error de PnL negativo
            total_pnl = performance.get('total_pnl', 0)
            if total_pnl < -1000:  # P√©rdida significativa
                error = Error(
                    error_type=ErrorType.PERFORMANCE_ERROR,
                    severity="critical",
                    description=f"PnL negativo significativo: {total_pnl:.2f}",
                    context=performance,
                    timestamp=datetime.now()
                )
                errors.append(error)
            
            # Error de drawdown excesivo
            max_drawdown = performance.get('max_drawdown', 0)
            if max_drawdown > 0.2:  # 20% drawdown
                error = Error(
                    error_type=ErrorType.PERFORMANCE_ERROR,
                    severity="high",
                    description=f"Drawdown excesivo: {max_drawdown:.2%}",
                    context=performance,
                    timestamp=datetime.now()
                )
                errors.append(error)
            
            return errors
            
        except Exception as e:
            logger.error(f"‚ùå Error detectando errores de performance: {e}")
            return []
    
    async def _detect_prediction_errors(self, context: Dict) -> List[Error]:
        """Detecta errores de predicci√≥n"""
        try:
            errors = []
            
            # Verificar predicciones recientes
            predictions = context.get('predictions', [])
            
            if len(predictions) < 5:
                return errors
            
            # Calcular accuracy de predicciones
            correct_predictions = 0
            for pred in predictions[-10:]:  # √öltimas 10 predicciones
                if pred.get('correct', False):
                    correct_predictions += 1
            
            accuracy = correct_predictions / len(predictions[-10:])
            
            if accuracy < self.error_thresholds['prediction_accuracy']:
                error = Error(
                    error_type=ErrorType.PREDICTION_ERROR,
                    severity="medium",
                    description=f"Accuracy de predicciones baja: {accuracy:.2f}",
                    context={'predictions': predictions[-10:]},
                    timestamp=datetime.now()
                )
                errors.append(error)
            
            return errors
            
        except Exception as e:
            logger.error(f"‚ùå Error detectando errores de predicci√≥n: {e}")
            return []
    
    async def _detect_decision_errors(self, context: Dict) -> List[Error]:
        """Detecta errores de decisi√≥n"""
        try:
            errors = []
            
            # Verificar decisiones recientes
            decisions = context.get('decisions', [])
            
            if len(decisions) < 3:
                return errors
            
            # Analizar patrones de decisi√≥n
            recent_decisions = decisions[-10:]
            
            # Error de decisiones repetitivas
            actions = [d.get('action', '') for d in recent_decisions]
            if len(set(actions)) == 1 and len(actions) > 5:
                error = Error(
                    error_type=ErrorType.DECISION_ERROR,
                    severity="medium",
                    description="Decisiones repetitivas detectadas",
                    context={'decisions': recent_decisions},
                    timestamp=datetime.now()
                )
                errors.append(error)
            
            # Error de confianza inconsistente
            confidences = [d.get('confidence', 0) for d in recent_decisions]
            if confidences and np.std(confidences) > 0.3:
                error = Error(
                    error_type=ErrorType.DECISION_ERROR,
                    severity="low",
                    description="Confianza inconsistente en decisiones",
                    context={'confidences': confidences},
                    timestamp=datetime.now()
                )
                errors.append(error)
            
            return errors
            
        except Exception as e:
            logger.error(f"‚ùå Error detectando errores de decisi√≥n: {e}")
            return []
    
    async def _detect_system_errors(self, context: Dict) -> List[Error]:
        """Detecta errores del sistema"""
        try:
            errors = []
            
            # Verificar estabilidad del sistema
            system_health = context.get('system_health', {})
            
            # Error de memoria alta
            memory_usage = system_health.get('memory_usage', 0)
            if memory_usage > 0.9:  # 90% de memoria
                error = Error(
                    error_type=ErrorType.SYSTEM_ERROR,
                    severity="high",
                    description=f"Uso de memoria alto: {memory_usage:.1%}",
                    context=system_health,
                    timestamp=datetime.now()
                )
                errors.append(error)
            
            # Error de CPU alta
            cpu_usage = system_health.get('cpu_usage', 0)
            if cpu_usage > 0.95:  # 95% de CPU
                error = Error(
                    error_type=ErrorType.SYSTEM_ERROR,
                    severity="medium",
                    description=f"Uso de CPU alto: {cpu_usage:.1%}",
                    context=system_health,
                    timestamp=datetime.now()
                )
                errors.append(error)
            
            return errors
            
        except Exception as e:
            logger.error(f"‚ùå Error detectando errores del sistema: {e}")
            return []
    
    async def _generate_correction(self, error: Error) -> Optional[Correction]:
        """Genera una correcci√≥n para un error"""
        try:
            correction_type = None
            parameters = {}
            description = ""
            
            if error.error_type == ErrorType.PERFORMANCE_ERROR:
                if "accuracy" in error.description.lower():
                    correction_type = CorrectionType.THRESHOLD_UPDATE
                    parameters = {'min_confidence': 0.8}
                    description = "Aumentar umbral de confianza m√≠nima"
                elif "pnl" in error.description.lower():
                    correction_type = CorrectionType.PARAMETER_ADJUSTMENT
                    parameters = {'position_size_multiplier': 0.5}
                    description = "Reducir tama√±o de posici√≥n"
                elif "drawdown" in error.description.lower():
                    correction_type = CorrectionType.STRATEGY_MODIFICATION
                    parameters = {'stop_loss_multiplier': 1.5}
                    description = "Aumentar stop loss"
            
            elif error.error_type == ErrorType.PREDICTION_ERROR:
                correction_type = CorrectionType.FILTER_ADDITION
                parameters = {'prediction_filter': 'confidence_weighted'}
                description = "Aplicar filtro de confianza a predicciones"
            
            elif error.error_type == ErrorType.DECISION_ERROR:
                if "repetitivas" in error.description.lower():
                    correction_type = CorrectionType.STRATEGY_MODIFICATION
                    parameters = {'decision_diversity': True}
                    description = "Activar diversificaci√≥n de decisiones"
                elif "confianza" in error.description.lower():
                    correction_type = CorrectionType.PARAMETER_ADJUSTMENT
                    parameters = {'confidence_smoothing': 0.1}
                    description = "Suavizar confianza de decisiones"
            
            elif error.error_type == ErrorType.SYSTEM_ERROR:
                if "memoria" in error.description.lower():
                    correction_type = CorrectionType.PARAMETER_ADJUSTMENT
                    parameters = {'memory_cleanup': True}
                    description = "Limpiar memoria del sistema"
                elif "cpu" in error.description.lower():
                    correction_type = CorrectionType.PARAMETER_ADJUSTMENT
                    parameters = {'processing_reduction': True}
                    description = "Reducir procesamiento"
            
            if correction_type:
                return Correction(
                    correction_type=correction_type,
                    error_id=f"ERR_{error.timestamp.strftime('%Y%m%d_%H%M%S')}",
                    description=description,
                    parameters=parameters,
                    timestamp=datetime.now()
                )
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error generando correcci√≥n: {e}")
            return None
    
    async def _apply_correction(self, correction: Correction) -> bool:
        """Aplica una correcci√≥n"""
        try:
            # TODO: Implementar aplicaci√≥n real de correcciones
            # Por ahora simular aplicaci√≥n exitosa
            
            logger.info(f"üîß Aplicando correcci√≥n: {correction.description}")
            
            # Simular tiempo de aplicaci√≥n
            await asyncio.sleep(0.1)
            
            # Marcar como exitosa
            correction.success = True
            correction.impact = "positive"
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error aplicando correcci√≥n: {e}")
            return False
    
    async def _attempt_system_recovery(self, error: Error) -> bool:
        """Intenta recuperar el sistema de un error cr√≠tico"""
        try:
            logger.info("üîÑ Intentando recuperaci√≥n del sistema...")
            
            # Estrategias de recuperaci√≥n
            recovery_strategies = [
                self._restart_components,
                self._reset_parameters,
                self._activate_fallback_mode,
                self._clear_caches
            ]
            
            for strategy in recovery_strategies:
                try:
                    success = await strategy()
                    if success:
                        logger.info("‚úÖ Recuperaci√≥n exitosa")
                        return True
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Estrategia de recuperaci√≥n fall√≥: {e}")
                    continue
            
            logger.error("‚ùå Todas las estrategias de recuperaci√≥n fallaron")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error en recuperaci√≥n: {e}")
            return False
    
    async def _restart_components(self) -> bool:
        """Reinicia componentes del sistema"""
        try:
            # TODO: Implementar reinicio real de componentes
            logger.info("üîÑ Reiniciando componentes...")
            await asyncio.sleep(1)
            return True
        except:
            return False
    
    async def _reset_parameters(self) -> bool:
        """Resetea par√°metros a valores por defecto"""
        try:
            # TODO: Implementar reset real de par√°metros
            logger.info("üîÑ Reseteando par√°metros...")
            await asyncio.sleep(0.5)
            return True
        except:
            return False
    
    async def _activate_fallback_mode(self) -> bool:
        """Activa modo de respaldo"""
        try:
            # TODO: Implementar modo de respaldo real
            logger.info("üîÑ Activando modo de respaldo...")
            await asyncio.sleep(0.5)
            return True
        except:
            return False
    
    async def _clear_caches(self) -> bool:
        """Limpia cach√©s del sistema"""
        try:
            # TODO: Implementar limpieza real de cach√©s
            logger.info("üîÑ Limpiando cach√©s...")
            await asyncio.sleep(0.3)
            return True
        except:
            return False
    
    async def _update_correction_metrics(self) -> None:
        """Actualiza m√©tricas de correcci√≥n"""
        try:
            total_corrections = self.correction_metrics['total_corrections_applied']
            successful_corrections = self.correction_metrics['successful_corrections']
            
            if total_corrections > 0:
                self.correction_metrics['correction_accuracy'] = successful_corrections / total_corrections
            
            # Calcular tasa de reducci√≥n de errores
            if len(self.error_history) > 10:
                recent_errors = [e for e in self.error_history[-10:] if e.timestamp > datetime.now() - timedelta(hours=1)]
                if recent_errors:
                    self.correction_metrics['error_reduction_rate'] = 1.0 - (len(recent_errors) / 10)
            
        except Exception as e:
            logger.error(f"‚ùå Error actualizando m√©tricas: {e}")
    
    async def _load_correction_config(self) -> None:
        """Carga configuraci√≥n de correcci√≥n"""
        try:
            # Cargar umbrales de error
            error_thresholds = self.correction_config.get('error_thresholds', {})
            if error_thresholds:
                self.error_thresholds.update(error_thresholds)
            
            # Cargar modo de correcci√≥n
            self.correction_mode = self.correction_config.get('correction_mode', 'automatic')
            
            logger.info("‚öôÔ∏è Configuraci√≥n de correcci√≥n cargada")
            
        except Exception as e:
            logger.error(f"‚ùå Error cargando configuraci√≥n: {e}")
    
    async def _initialize_monitoring(self) -> None:
        """Inicializa el monitoreo del sistema"""
        try:
            # TODO: Inicializar monitoreo real
            logger.info("üìä Monitoreo inicializado")
        except Exception as e:
            logger.error(f"‚ùå Error inicializando monitoreo: {e}")
    
    async def _load_error_history(self) -> None:
        """Carga historial de errores"""
        try:
            # TODO: Cargar desde base de datos
            logger.info("üìö Historial de errores cargado")
        except Exception as e:
            logger.error(f"‚ùå Error cargando historial: {e}")
    
    def get_correction_statistics(self) -> Dict:
        """Obtiene estad√≠sticas del mecanismo de correcci√≥n"""
        try:
            return {
                'correction_metrics': self.correction_metrics,
                'recent_errors': self.error_history[-10:],
                'recent_corrections': self.correction_history[-10:],
                'validation_success_rate': self._calculate_validation_success_rate(),
                'error_trends': self._analyze_error_trends()
            }
        except Exception as e:
            logger.error(f"‚ùå Error obteniendo estad√≠sticas: {e}")
            return {}
    
    def _calculate_validation_success_rate(self) -> float:
        """Calcula tasa de √©xito de validaciones"""
        try:
            if not self.validation_history:
                return 0.0
            
            recent_validations = self.validation_history[-20:]
            successful = sum(1 for v in recent_validations if v['validation'].is_valid)
            return successful / len(recent_validations)
        except:
            return 0.0
    
    def _analyze_error_trends(self) -> Dict:
        """Analiza tendencias de errores"""
        try:
            if len(self.error_history) < 5:
                return {}
            
            # Agrupar errores por tipo
            error_types = {}
            for error in self.error_history[-20:]:
                error_type = error.error_type.value
                error_types[error_type] = error_types.get(error_type, 0) + 1
            
            # Calcular tendencia temporal
            recent_errors = [e for e in self.error_history if e.timestamp > datetime.now() - timedelta(hours=1)]
            older_errors = [e for e in self.error_history if datetime.now() - timedelta(hours=2) < e.timestamp < datetime.now() - timedelta(hours=1)]
            
            trend = "stable"
            if len(recent_errors) > len(older_errors) * 1.5:
                trend = "increasing"
            elif len(recent_errors) < len(older_errors) * 0.5:
                trend = "decreasing"
            
            return {
                'error_types': error_types,
                'trend': trend,
                'recent_count': len(recent_errors),
                'older_count': len(older_errors)
            }
        except:
            return {}
