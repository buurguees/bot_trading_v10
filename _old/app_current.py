#!/usr/bin/env python3
"""
app.py - Punto de Entrada Principal del Trading Bot v10
======================================================

SISTEMA DE MEN√ö INTERACTIVO COMPLETO

Uso: python app.py

Funcionalidades:
1. Descargar hist√≥ricos completos
2. Analizar datos hist√≥ricos
3. Validar datos hist√≥ricos
4. Alinear datos hist√≥ricos (Multi-s√≠mbolo)
5. Entrenamiento corto (6 horas)
6. Entrenamiento infinito con dashboard
7. Trading en papel
8. Trading en vivo
9. Dashboard independiente
10. An√°lisis de performance
11. Estado del sistema
12. Salir

Autor: Bot Trading v10 Enterprise
Versi√≥n: 10.0.0
"""

import asyncio
import os
import sys
import logging
from datetime import datetime
import subprocess
import threading
import time
import webbrowser
from pathlib import Path

# A√±adir directorio del proyecto al path
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.append(project_root)
sys.path.insert(0, str(Path(__file__).parent / "src"))
sys.path.insert(0, str(Path(__file__).parent / "config"))

# Cargar variables de entorno
from dotenv import load_dotenv
load_dotenv()

# Configurar logging b√°sico
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TradingBotApp:
    """Aplicaci√≥n principal del Trading Bot v10 con men√∫ interactivo"""
    
    def __init__(self):
        self.running = True
        self.dashboard_process = None
        self.symbols = self._load_symbols_from_config()
        
    def _load_symbols_from_config(self):
        """Carga s√≠mbolos autom√°ticamente desde los archivos .yaml"""
        try:
            from config.config_loader import user_config
            symbols = user_config.get_symbols()
            if symbols:
                logger.info(f"S√≠mbolos cargados desde configuraci√≥n: {', '.join(symbols)}")
                return symbols
            else:
                # Fallback a s√≠mbolos por defecto
                default_symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT', 'DOGEUSDT']
                logger.warning(f"No se encontraron s√≠mbolos en configuraci√≥n, usando por defecto: {', '.join(default_symbols)}")
                return default_symbols
        except Exception as e:
            logger.error(f"Error cargando s√≠mbolos: {e}")
            return ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT', 'DOGEUSDT']
    
    def show_banner(self):
        """Muestra banner de bienvenida"""
        print("\n" + "="*70)
        print("     ü§ñ TRADING BOT v10 - SISTEMA AUT√ìNOMO DE TRADING ü§ñ")
        print("="*70)
        print(f"     Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"     Entorno: Python {sys.version_info.major}.{sys.version_info.minor}")
        print(f"     Directorio: {project_root}")
        print(f"     S√≠mbolos: {', '.join(self.symbols)}")
        print("="*70)
        print()
    
    def show_main_menu(self):
        """Muestra el men√∫ principal"""
        print("üìã MEN√ö PRINCIPAL - ENTERPRISE EDITION")
        print("-" * 40)
        print("1. üì• Descargar datos hist√≥ricos")
        print("2. üîç Analizar datos hist√≥ricos")
        print("3. ‚úÖ Validar datos hist√≥ricos")
        print("4. üîÑ Alinear datos hist√≥ricos (Multi-s√≠mbolo)")
        print("5. üöÄ Entrenamiento corto (6 horas)")
        print("6. ‚ö° Entrenamiento infinito con dashboard")
        print("7. üìä Trading en papel")
        print("8. üí∞ Trading en vivo")
        print("9. üìà Dashboard independiente")
        print("10. üìä An√°lisis de performance")
        print("11. üì± Estado del sistema")
        print("12. ‚ùå Salir")
        print()
        
        # Mostrar estado del sistema
        print("üè¢ Sistema Enterprise: ‚úÖ Disponible")
        print(f"üìä S√≠mbolos configurados: {len(self.symbols)} - {', '.join(self.symbols[:3])}{'...' if len(self.symbols) > 3 else ''}")
        print()
    
    def get_user_choice(self) -> str:
        """Obtiene la elecci√≥n del usuario"""
        try:
            choice = input("Selecciona una opci√≥n (1-12): ").strip()
            return choice
        except KeyboardInterrupt:
            print("\nüëã Saliendo...")
            return "12"
        except Exception:
            return ""
    
    async def download_historical_data(self):
        """Opci√≥n 1: Descargar datos hist√≥ricos"""
        print("\nüì• DESCARGA DE DATOS HIST√ìRICOS")
        print("=" * 40)
        print(f"S√≠mbolos: {', '.join(self.symbols)}")
        print()
        
        try:
            # Usar el bot.py para descargar datos
            cmd = [sys.executable, 'bot.py', '--mode', 'download-historical', '--symbols', ','.join(self.symbols)]
            
            print(f"üöÄ Ejecutando: {' '.join(cmd)}")
            print("‚è≥ Esto puede tomar varios minutos...")
            print()
            
            process = subprocess.run(cmd, capture_output=True, text=True, cwd=project_root)
            
            if process.returncode == 0:
                print("‚úÖ Descarga completada exitosamente")
                print(process.stdout)
            else:
                print("‚ùå Error durante la descarga")
                print(process.stderr)
                
        except Exception as e:
            print(f"‚ùå Error durante la descarga: {e}")
            logger.error(f"Error en descarga: {e}")
        
        input("\nPresiona Enter para continuar...")
    
    async def analyze_historical_data(self):
        """Opci√≥n 2: Analizar datos hist√≥ricos"""
        print("\nüîç AN√ÅLISIS DE DATOS HIST√ìRICOS")
        print("=" * 40)
        print(f"S√≠mbolos: {', '.join(self.symbols)}")
        print()
        
        try:
            # Usar el bot.py para analizar datos
            cmd = [sys.executable, 'bot.py', '--mode', 'analyze', '--symbols', ','.join(self.symbols)]
            
            print(f"üöÄ Ejecutando: {' '.join(cmd)}")
            print()
            
            process = subprocess.run(cmd, capture_output=True, text=True, cwd=project_root)
            
            if process.returncode == 0:
                print("‚úÖ An√°lisis completado exitosamente")
                print(process.stdout)
            else:
                print("‚ùå Error durante el an√°lisis")
                print(process.stderr)
                
        except Exception as e:
            print(f"‚ùå Error durante el an√°lisis: {e}")
            logger.error(f"Error en an√°lisis: {e}")
        
        input("\nPresiona Enter para continuar...")
    
    async def validate_historical_data(self):
        """Opci√≥n 3: Validar datos hist√≥ricos"""
        print("\n‚úÖ VALIDACI√ìN DE DATOS HIST√ìRICOS")
        print("=" * 40)
        print(f"S√≠mbolos: {', '.join(self.symbols)}")
        print()
        
        try:
            # Usar el bot.py para validar datos
            cmd = [sys.executable, 'bot.py', '--mode', 'validate', '--symbols', ','.join(self.symbols)]
            
            print(f"üöÄ Ejecutando: {' '.join(cmd)}")
            print()
            
            process = subprocess.run(cmd, capture_output=True, text=True, cwd=project_root)
            
            if process.returncode == 0:
                print("‚úÖ Validaci√≥n completada exitosamente")
                print(process.stdout)
            else:
                print("‚ùå Error durante la validaci√≥n")
                print(process.stderr)
                
        except Exception as e:
            print(f"‚ùå Error durante la validaci√≥n: {e}")
            logger.error(f"Error en validaci√≥n: {e}")
        
        input("\nPresiona Enter para continuar...")
    
    async def align_historical_data(self):
        """Opci√≥n 4: Alinear datos hist√≥ricos para an√°lisis multi-s√≠mbolo"""
        print("\nüîÑ ALINEACI√ìN DE DATOS HIST√ìRICOS")
        print("=" * 45)
        print("Esta funci√≥n sincroniza los datos de todos los s√≠mbolos")
        print("para permitir an√°lisis simult√°neo y trading multi-s√≠mbolo.")
        print(f"S√≠mbolos: {', '.join(self.symbols)}")
        print()
        
        try:
            # Crear script temporal para alineaci√≥n
            align_script = """
import pandas as pd
import os
from pathlib import Path
import json

def align_data():
    symbols = {symbols}
    data_dir = Path('data/historical')
    alignments_dir = Path('data/alignments')
    alignments_dir.mkdir(exist_ok=True)
    
    print(f"Procesando {len(symbols)} s√≠mbolos...")
    
    aligned_data = {{}}
    common_start = None
    common_end = None
    
    # Cargar datos de cada s√≠mbolo
    for symbol in symbols:
        file_path = data_dir / f"{{symbol}}_1m.csv"
        if file_path.exists():
            df = pd.read_csv(file_path, parse_dates=['timestamp'])
            df.set_index('timestamp', inplace=True)
            
            if common_start is None:
                common_start = df.index.min()
                common_end = df.index.max()
            else:
                common_start = max(common_start, df.index.min())
                common_end = min(common_end, df.index.max())
            
            aligned_data[symbol] = df
            print(f"  {{symbol}}: {{len(df)}} registros")
        else:
            print(f"  {{symbol}}: ‚ùå Archivo no encontrado")
    
    if common_start and common_end:
        # Crear timestamps comunes
        common_timestamps = pd.date_range(start=common_start, end=common_end, freq='1min')
        print(f"Timestamps comunes: {{len(common_timestamps)}}")
        
        # Alinear todos los datos
        for symbol, df in aligned_data.items():
            aligned_df = df.reindex(common_timestamps, method='ffill')
            aligned_data[symbol] = aligned_df
            print(f"  {{symbol}} alineado: {{len(aligned_df)}} registros")
        
        # Guardar datos alineados
        output_file = alignments_dir / 'multi_symbol_aligned.json'
        with open(output_file, 'w') as f:
            # Convertir DataFrames a dict para JSON
            json_data = {{}}
            for symbol, df in aligned_data.items():
                json_data[symbol] = {{
                    'data': df.to_dict('records'),
                    'start': common_start.isoformat(),
                    'end': common_end.isoformat()
                }}
            json.dump(json_data, f, indent=2)
        
        print(f"‚úÖ Datos alineados guardados en: {{output_file}}")
        print(f"Per√≠odo com√∫n: {{common_start.strftime('%Y-%m-%d')}} a {{common_end.strftime('%Y-%m-%d')}}")
    else:
        print("‚ùå No se encontraron datos para alinear")

if __name__ == "__main__":
    align_data()
""".format(symbols=self.symbols)
            
            # Guardar script temporal
            temp_script = Path('temp_align.py')
            with open(temp_script, 'w', encoding='utf-8') as f:
                f.write(align_script)
            
            # Ejecutar script
            cmd = [sys.executable, str(temp_script)]
            process = subprocess.run(cmd, capture_output=True, text=True, cwd=project_root)
            
            # Limpiar script temporal
            temp_script.unlink()
            
            if process.returncode == 0:
                print("‚úÖ Alineaci√≥n completada exitosamente")
                print(process.stdout)
            else:
                print("‚ùå Error durante la alineaci√≥n")
                print(process.stderr)
                
        except Exception as e:
            print(f"‚ùå Error durante la alineaci√≥n: {e}")
            logger.error(f"Error en alineaci√≥n: {e}")
        
        input("\nPresiona Enter para continuar...")
    
    async def start_short_training(self):
        """Opci√≥n 5: Entrenamiento corto (6 horas)"""
        print("\nüöÄ ENTRENAMIENTO CORTO (6 HORAS)")
        print("=" * 40)
        print(f"S√≠mbolos: {', '.join(self.symbols)}")
        print()
        
        try:
            # Usar el bot.py para entrenamiento corto
            cmd = [sys.executable, 'bot.py', '--mode', 'train-short', '--symbols', ','.join(self.symbols)]
            
            print(f"üöÄ Ejecutando: {' '.join(cmd)}")
            print("‚è≥ Esto puede tomar varias horas...")
            print()
            
            process = subprocess.run(cmd, capture_output=True, text=True, cwd=project_root)
            
            if process.returncode == 0:
                print("‚úÖ Entrenamiento corto completado exitosamente")
                print(process.stdout)
            else:
                print("‚ùå Error durante el entrenamiento")
                print(process.stderr)
                
        except Exception as e:
            print(f"‚ùå Error durante el entrenamiento: {e}")
            logger.error(f"Error en entrenamiento: {e}")
        
        input("\nPresiona Enter para continuar...")
    
    async def start_infinite_training_with_dashboard(self):
        """Opci√≥n 6: Entrenamiento infinito con dashboard"""
        print("\n‚ö° ENTRENAMIENTO INFINITO CON DASHBOARD")
        print("=" * 45)
        print(f"S√≠mbolos: {', '.join(self.symbols)}")
        print()
        
        try:
            # Usar el bot.py para entrenamiento infinito
            cmd = [sys.executable, 'bot.py', '--mode', 'train-infinite', '--symbols', ','.join(self.symbols)]
            
            print(f"üöÄ Ejecutando: {' '.join(cmd)}")
            print("‚è≥ Esto iniciar√° el entrenamiento y el dashboard...")
            print("üåê Dashboard estar√° disponible en: http://127.0.0.1:8050")
            print()
            
            # Ejecutar en hilo separado
            def run_training():
                process = subprocess.run(cmd, cwd=project_root)
                return process
            
            training_thread = threading.Thread(target=run_training, daemon=True)
            training_thread.start()
            
            # Esperar un poco y abrir navegador
            time.sleep(5)
            try:
                webbrowser.open('http://127.0.0.1:8050')
                print("üåê Dashboard abierto en: http://127.0.0.1:8050")
            except Exception:
                print("üåê Abre manualmente: http://127.0.0.1:8050")
            
            print("\nüìä Entrenamiento infinito activo")
            print("üí° Presiona Ctrl+C para detener")
            
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Deteniendo entrenamiento...")
                
        except Exception as e:
            print(f"‚ùå Error durante el entrenamiento infinito: {e}")
            logger.error(f"Error en entrenamiento infinito: {e}")
        
        input("\nPresiona Enter para continuar...")
    
    async def start_paper_trading(self):
        """Opci√≥n 7: Trading en papel"""
        print("\nüìä TRADING EN PAPEL")
        print("=" * 25)
        print(f"S√≠mbolos: {', '.join(self.symbols)}")
        print()
        
        try:
            # Seleccionar leverage
            while True:
                try:
                    leverage_input = input("Selecciona leverage (5-30, por defecto 10): ").strip()
                    leverage = int(leverage_input) if leverage_input else 10
                    if 5 <= leverage <= 30:
                        break
                    else:
                        print("‚ö†Ô∏è Por favor ingresa un leverage entre 5 y 30")
                except ValueError:
                    print("‚ö†Ô∏è Por favor ingresa un n√∫mero v√°lido")
            
            # Usar el bot.py para trading en papel
            cmd = [sys.executable, 'bot.py', '--mode', 'paper', '--symbols', ','.join(self.symbols), '--leverage', str(leverage)]
            
            print(f"üöÄ Ejecutando: {' '.join(cmd)}")
            print("‚è≥ Iniciando trading en papel...")
            print()
            
            process = subprocess.run(cmd, capture_output=True, text=True, cwd=project_root)
            
            if process.returncode == 0:
                print("‚úÖ Trading en papel completado")
                print(process.stdout)
            else:
                print("‚ùå Error durante el trading en papel")
                print(process.stderr)
                
        except Exception as e:
            print(f"‚ùå Error durante el trading en papel: {e}")
            logger.error(f"Error en trading en papel: {e}")
        
        input("\nPresiona Enter para continuar...")
    
    async def start_live_trading(self):
        """Opci√≥n 8: Trading en vivo"""
        print("\nüí∞ TRADING EN VIVO")
        print("=" * 25)
        print("‚ö†Ô∏è ADVERTENCIA: Esta opci√≥n ejecutar√° trading real con dinero real")
        print(f"S√≠mbolos: {', '.join(self.symbols)}")
        print()
        
        # Confirmar trading en vivo
        confirm = input("¬øEst√°s seguro de que quieres iniciar trading en vivo? (escribe 'SI' para confirmar): ").strip()
        if confirm != 'SI':
            print("‚ùå Trading en vivo cancelado")
            input("\nPresiona Enter para continuar...")
            return
        
        try:
            # Seleccionar leverage
            while True:
                try:
                    leverage_input = input("Selecciona leverage (5-30, por defecto 10): ").strip()
                    leverage = int(leverage_input) if leverage_input else 10
                    if 5 <= leverage <= 30:
                        break
                    else:
                        print("‚ö†Ô∏è Por favor ingresa un leverage entre 5 y 30")
                except ValueError:
                    print("‚ö†Ô∏è Por favor ingresa un n√∫mero v√°lido")
            
            # Usar el bot.py para trading en vivo
            cmd = [sys.executable, 'bot.py', '--mode', 'live', '--symbols', ','.join(self.symbols), '--leverage', str(leverage)]
            
            print(f"üöÄ Ejecutando: {' '.join(cmd)}")
            print("‚è≥ Iniciando trading en vivo...")
            print("‚ö†Ô∏è MONITOREAR CUIDADOSAMENTE")
            print()
            
            process = subprocess.run(cmd, capture_output=True, text=True, cwd=project_root)
            
            if process.returncode == 0:
                print("‚úÖ Trading en vivo completado")
                print(process.stdout)
            else:
                print("‚ùå Error durante el trading en vivo")
                print(process.stderr)
                
        except Exception as e:
            print(f"‚ùå Error durante el trading en vivo: {e}")
            logger.error(f"Error en trading en vivo: {e}")
        
        input("\nPresiona Enter para continuar...")
    
    async def start_dashboard(self):
        """Opci√≥n 9: Dashboard independiente"""
        print("\nüìà DASHBOARD INDEPENDIENTE")
        print("=" * 30)
        print("Iniciando dashboard en puerto 8050...")
        print()
        
        try:
            # Usar el dashboard.py
            cmd = [sys.executable, 'dashboard.py', '--port', '8050']
            
            print(f"üöÄ Ejecutando: {' '.join(cmd)}")
            print("üåê Dashboard estar√° disponible en: http://127.0.0.1:8050")
            print()
            
            # Ejecutar en hilo separado
            def run_dashboard():
                process = subprocess.run(cmd, cwd=project_root)
                return process
            
            dashboard_thread = threading.Thread(target=run_dashboard, daemon=True)
            dashboard_thread.start()
            
            # Esperar un poco y abrir navegador
            time.sleep(3)
            try:
                webbrowser.open('http://127.0.0.1:8050')
                print("üåê Dashboard abierto en: http://127.0.0.1:8050")
            except Exception:
                print("üåê Abre manualmente: http://127.0.0.1:8050")
            
            print("\nüìä Dashboard activo")
            print("üí° Presiona Ctrl+C para detener")
            
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Deteniendo dashboard...")
                
        except Exception as e:
            print(f"‚ùå Error durante el dashboard: {e}")
            logger.error(f"Error en dashboard: {e}")
        
        input("\nPresiona Enter para continuar...")
    
    async def performance_analysis(self):
        """Opci√≥n 10: An√°lisis de performance"""
        print("\nüìä AN√ÅLISIS DE PERFORMANCE")
        print("=" * 30)
        
        try:
            # Verificar archivos de reportes
            reports_dir = Path('reports')
            if reports_dir.exists():
                print("üìÅ Reportes disponibles:")
                for report_file in reports_dir.glob('*.json'):
                    print(f"   üìÑ {report_file.name}")
                
                # Mostrar an√°lisis si existe
                analysis_file = reports_dir / 'analysis.json'
                if analysis_file.exists():
                    import json
                    with open(analysis_file, 'r', encoding='utf-8') as f:
                        analysis_data = json.load(f)
                    
                    print(f"\nüìà An√°lisis de datos:")
                    for symbol, data in analysis_data.items():
                        if isinstance(data, dict):
                            print(f"   {symbol}:")
                            for key, value in data.items():
                                if isinstance(value, (int, float)):
                                    print(f"     {key}: {value}")
                                else:
                                    print(f"     {key}: {value}")
            else:
                print("‚ùå No se encontraron reportes")
                print("üí° Ejecuta primero 'Analizar datos hist√≥ricos' para generar reportes")
            
            # Verificar modelos
            models_dir = Path('models')
            if models_dir.exists():
                model_files = list(models_dir.glob('*_model.json'))
                print(f"\nüß† Modelos entrenados: {len(model_files)}")
                for model_file in model_files:
                    print(f"   üìÑ {model_file.name}")
            else:
                print("\n‚ùå No se encontraron modelos")
                print("üí° Ejecuta primero 'Entrenamiento corto' para generar modelos")
                
        except Exception as e:
            print(f"‚ùå Error durante el an√°lisis: {e}")
            logger.error(f"Error en an√°lisis: {e}")
        
        input("\nPresiona Enter para continuar...")
    
    async def system_status(self):
        """Opci√≥n 11: Estado del sistema"""
        print("\nüì± ESTADO DEL SISTEMA")
        print("=" * 25)
        
        try:
            # Estado general
            print("üñ•Ô∏è Sistema:")
            print(f"   Python: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
            print(f"   Directorio: {project_root}")
            print(f"   Tiempo de ejecuci√≥n: {datetime.now().strftime('%H:%M:%S')}")
            print(f"   S√≠mbolos configurados: {len(self.symbols)}")
            
            # Estado de archivos cr√≠ticos
            print(f"\nüìÅ Archivos cr√≠ticos:")
            critical_files = [
                'bot.py',
                'dashboard.py',
                'config/user_settings.yaml',
                '.env',
                'requirements.txt'
            ]
            
            for file_path in critical_files:
                full_path = Path(project_root) / file_path
                status = "‚úÖ" if full_path.exists() else "‚ùå"
                print(f"   {status} {file_path}")
            
            # Estado de directorios de datos
            print(f"\nüìä Directorios de datos:")
            data_dirs = ['data/historical', 'data/alignments', 'models', 'reports', 'logs']
            for dir_path in data_dirs:
                full_path = Path(project_root) / dir_path
                if full_path.exists():
                    file_count = len(list(full_path.glob('*')))
                    print(f"   ‚úÖ {dir_path} ({file_count} archivos)")
                else:
                    print(f"   ‚ùå {dir_path}")
            
            # Verificar APIs
            print(f"\nüîë APIs:")
            api_key = os.getenv('BITGET_API_KEY')
            if api_key and api_key != 'your_bitget_api_key_here':
                print(f"   ‚úÖ Bitget API: Configurada")
            else:
                print(f"   ‚ùå Bitget API: No configurada")
            
            # Estado de procesos
            print(f"\nüîÑ Procesos:")
            if self.dashboard_process and self.dashboard_process.poll() is None:
                print(f"   Dashboard: ‚úÖ Activo (PID: {self.dashboard_process.pid})")
            else:
                print(f"   Dashboard: ‚ùå Inactivo")
            
        except Exception as e:
            print(f"‚ùå Error obteniendo estado: {e}")
        
        input("\nPresiona Enter para continuar...")
    
    async def run(self):
        """Ejecuta el bucle principal de la aplicaci√≥n"""
        self.show_banner()
        
        while self.running:
            try:
                self.show_main_menu()
                choice = self.get_user_choice()
                
                if choice == "1":
                    await self.download_historical_data()
                elif choice == "2":
                    await self.analyze_historical_data()
                elif choice == "3":
                    await self.validate_historical_data()
                elif choice == "4":
                    await self.align_historical_data()
                elif choice == "5":
                    await self.start_short_training()
                elif choice == "6":
                    await self.start_infinite_training_with_dashboard()
                elif choice == "7":
                    await self.start_paper_trading()
                elif choice == "8":
                    await self.start_live_trading()
                elif choice == "9":
                    await self.start_dashboard()
                elif choice == "10":
                    await self.performance_analysis()
                elif choice == "11":
                    await self.system_status()
                elif choice == "12":
                    self.running = False
                    print("\nüëã ¬°Hasta luego!")
                else:
                    print("\n‚ö†Ô∏è Opci√≥n no v√°lida. Por favor selecciona 1-12.")
                    time.sleep(1)
                    
            except KeyboardInterrupt:
                print("\n\nüëã Saliendo...")
                self.running = False
            except Exception as e:
                print(f"\n‚ùå Error inesperado: {e}")
                logger.error(f"Error en bucle principal: {e}")
                time.sleep(2)
        
        # Limpiar procesos
        if self.dashboard_process and self.dashboard_process.poll() is None:
            print("üßπ Deteniendo procesos...")
            self.dashboard_process.terminate()

def main():
    """Funci√≥n principal"""
    try:
        app = TradingBotApp()
        asyncio.run(app.run())
    except KeyboardInterrupt:
        print("\nüëã Aplicaci√≥n terminada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        logger.error(f"Error cr√≠tico en main: {e}")

if __name__ == "__main__":
    main()
