#!/usr/bin/env python3
"""
Script de diagn√≥stico para la API de Binance
"""

import ccxt
import time
from datetime import datetime

def test_binance_api():
    """Prueba la conectividad con la API de Binance"""
    try:
        print("üîç Probando conectividad con Binance API...")
        
        # Crear exchange con configuraci√≥n conservadora
        exchange = ccxt.binance({
            'enableRateLimit': True,
            'timeout': 30000,  # 30 segundos
            'rateLimit': 1200,  # 1.2 segundos entre llamadas
        })
        
        print(f"‚úÖ Exchange creado: {exchange.name}")
        print(f"üìä Rate limit: {exchange.rateLimit}ms")
        
        # Probar ticker simple
        print("\nüîç Probando fetch_ticker...")
        ticker = exchange.fetch_ticker('BTC/USDT')
        print(f"‚úÖ Ticker obtenido: {ticker['symbol']} = ${ticker['last']}")
        
        # Probar datos hist√≥ricos simples
        print("\nüîç Probando fetch_ohlcv (√∫ltimas 100 velas)...")
        ohlcv = exchange.fetch_ohlcv('BTC/USDT', '1m', limit=100)
        print(f"‚úÖ OHLCV obtenido: {len(ohlcv)} velas")
        
        if ohlcv:
            first_candle = ohlcv[0]
            last_candle = ohlcv[-1]
            print(f"   Primera vela: {datetime.fromtimestamp(first_candle[0]/1000)}")
            print(f"   √öltima vela: {datetime.fromtimestamp(last_candle[0]/1000)}")
            print(f"   Precio: ${last_candle[4]}")
        
        # Probar con par√°metros espec√≠ficos del error
        print("\nüîç Probando fetch_ohlcv con par√°metros espec√≠ficos...")
        now_ms = exchange.milliseconds()
        start_ms = now_ms - (24 * 60 * 60 * 1000)  # 24 horas atr√°s
        
        ohlcv_specific = exchange.fetch_ohlcv(
            'BTC/USDT', 
            '1m', 
            since=start_ms, 
            limit=1000
        )
        print(f"‚úÖ OHLCV espec√≠fico obtenido: {len(ohlcv_specific)} velas")
        
        return True
        
    except ccxt.RateLimitExceeded as e:
        print(f"‚ùå Rate limit excedido: {e}")
        print("üí° Soluci√≥n: Esperar m√°s tiempo entre llamadas")
        return False
        
    except ccxt.NetworkError as e:
        print(f"‚ùå Error de red: {e}")
        print("üí° Soluci√≥n: Verificar conexi√≥n a internet")
        return False
        
    except ccxt.ExchangeError as e:
        print(f"‚ùå Error de exchange: {e}")
        print("üí° Soluci√≥n: Verificar par√°metros de la llamada")
        return False
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        print(f"   Tipo: {type(e).__name__}")
        return False

def test_historical_download():
    """Prueba la descarga de datos hist√≥ricos como en bot.py"""
    try:
        print("\nüîç Probando descarga hist√≥rica (m√©todo bot.py)...")
        
        exchange = ccxt.binance({'enableRateLimit': True})
        
        # Par√°metros del error
        symbol = 'BTCUSDT'
        timeframe = '1m'
        years = 5
        
        market_symbol = symbol.replace('USDT', '/USDT')
        now_ms = exchange.milliseconds()
        year_ms = 365 * 24 * 60 * 60 * 1000
        start_ms = now_ms - years * year_ms
        
        print(f"üìä Descargando {years} a√±os de {market_symbol} @ {timeframe}")
        print(f"   Desde: {datetime.fromtimestamp(start_ms/1000)}")
        print(f"   Hasta: {datetime.fromtimestamp(now_ms/1000)}")
        
        # Primera llamada
        print("üîÑ Haciendo primera llamada...")
        batch = exchange.fetch_ohlcv(market_symbol, timeframe=timeframe, since=start_ms, limit=1000)
        
        if batch:
            print(f"‚úÖ Primera llamada exitosa: {len(batch)} velas")
            print(f"   Primera vela: {datetime.fromtimestamp(batch[0][0]/1000)}")
            print(f"   √öltima vela: {datetime.fromtimestamp(batch[-1][0]/1000)}")
        else:
            print("‚ùå Primera llamada fall√≥: sin datos")
            return False
        
        # Esperar un poco
        print("‚è≥ Esperando 2 segundos...")
        time.sleep(2)
        
        # Segunda llamada
        print("üîÑ Haciendo segunda llamada...")
        tf_ms = exchange.parse_timeframe(timeframe) * 1000
        next_since = batch[-1][0] + tf_ms
        
        batch2 = exchange.fetch_ohlcv(market_symbol, timeframe=timeframe, since=next_since, limit=1000)
        
        if batch2:
            print(f"‚úÖ Segunda llamada exitosa: {len(batch2)} velas")
        else:
            print("‚ùå Segunda llamada fall√≥: sin datos")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en descarga hist√≥rica: {e}")
        print(f"   Tipo: {type(e).__name__}")
        return False

def main():
    """Funci√≥n principal"""
    print("üß™ DIAGN√ìSTICO DE API DE BINANCE")
    print("=" * 50)
    
    # Test 1: Conectividad b√°sica
    basic_ok = test_binance_api()
    
    # Test 2: Descarga hist√≥rica
    if basic_ok:
        historical_ok = test_historical_download()
    else:
        historical_ok = False
    
    print("\n" + "=" * 50)
    print("üìä RESUMEN")
    print("=" * 50)
    print(f"Conectividad b√°sica: {'‚úÖ OK' if basic_ok else '‚ùå FALLO'}")
    print(f"Descarga hist√≥rica: {'‚úÖ OK' if historical_ok else '‚ùå FALLO'}")
    
    if not basic_ok:
        print("\nüí° SOLUCIONES:")
        print("1. Verificar conexi√≥n a internet")
        print("2. Verificar que Binance API est√© disponible")
        print("3. Revisar configuraci√≥n de proxy/firewall")
    elif not historical_ok:
        print("\nüí° SOLUCIONES:")
        print("1. Reducir el per√≠odo de descarga (menos a√±os)")
        print("2. Aumentar el delay entre llamadas")
        print("3. Usar un timeframe mayor (1h en lugar de 1m)")
        print("4. Verificar l√≠mites de la API de Binance")
    
    return basic_ok and historical_ok

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
