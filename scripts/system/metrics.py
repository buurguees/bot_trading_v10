#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para el comando /metrics
M√©tricas detalladas del sistema
"""

import sys
from pathlib import Path
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Agregar directorios al path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from core.data.database import db_manager
from core.config.config_loader import ConfigLoader

def main():
    """Funci√≥n principal"""
    try:
        # Cargar configuraci√≥n
        config_loader = ConfigLoader("config/user_settings.yaml")
        config = config_loader.load_config()
        
        # Obtener s√≠mbolos y timeframes
        symbols = config.get("trading_settings", {}).get("timeframes", {}).get("symbols", [])
        timeframes = config.get("trading_settings", {}).get("timeframes", {}).get("timeframes", [])
        
        # Calcular m√©tricas
        total_records = 0
        symbol_metrics = {}
        
        for symbol in symbols:
            count = db_manager.get_market_data_count_fast(symbol)
            symbol_metrics[symbol] = count
            total_records += count
        
        # Verificar datos sincronizados
        latest_session = db_manager.get_latest_sync_session()
        
        # Generar reporte de m√©tricas
        report = f"""
üìä <b>M√©tricas Detalladas del Sistema</b>

<b>üîß Configuraci√≥n:</b>
‚Ä¢ S√≠mbolos activos: {len(symbols)}
‚Ä¢ Timeframes configurados: {len(timeframes)}
‚Ä¢ Total de registros: {total_records:,}

<b>üìà Datos por S√≠mbolo:</b>
"""
        
        for symbol, count in symbol_metrics.items():
            status_icon = "‚úÖ" if count > 0 else "‚ùå"
            percentage = (count / total_records * 100) if total_records > 0 else 0
            report += f"‚Ä¢ {symbol}: {count:,} registros ({percentage:.1f}%) {status_icon}\n"
        
        report += f"\n<b>üîÑ Sincronizaci√≥n:</b>\n"
        if latest_session:
            report += f"‚Ä¢ √öltima sesi√≥n: {latest_session}\n"
            report += f"‚Ä¢ Estado: ‚úÖ Datos sincronizados disponibles\n"
        else:
            report += f"‚Ä¢ Estado: ‚ö†Ô∏è Sin datos sincronizados\n"
            report += f"‚Ä¢ Acci√≥n: Ejecute /sync_symbols\n"
        
        report += f"\n<b>üìä Resumen:</b>\n"
        report += f"‚Ä¢ Cobertura de datos: {(len([s for s in symbol_metrics.values() if s > 0]) / len(symbols) * 100):.1f}%\n"
        report += f"‚Ä¢ Promedio de registros por s√≠mbolo: {total_records // len(symbols):,}\n"
        
        if total_records > 0:
            report += f"\n‚úÖ <b>Estado:</b> Sistema operativo con datos"
        else:
            report += f"\n‚ö†Ô∏è <b>Estado:</b> Sistema sin datos - Ejecute /download_data"
        
        print(report)
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
