#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para el comando /sync_symbols
Sincroniza timestamps de todos los s√≠mbolos para ejecuci√≥n paralela
"""

import asyncio
import sys
import logging
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Agregar directorios al path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from core.sync.symbol_synchronizer import SymbolSynchronizer
from core.sync.parallel_executor import ParallelExecutor
from core.sync.metrics_aggregator import MetricsAggregator
from core.data.database import db_manager
from config.config_loader import ConfigLoader

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SyncSymbolsScript:
    """Script para sincronizaci√≥n de s√≠mbolos"""
    
    def __init__(self):
        self.config_loader = ConfigLoader("config/user_settings.yaml")
        self.config = self.config_loader.load_config()
        self.synchronizer = None
        self.executor = None
        self.aggregator = None
        
    async def initialize(self):
        """Inicializar componentes"""
        try:
            # Inicializar componentes
            self.synchronizer = SymbolSynchronizer()
            self.executor = ParallelExecutor()
            self.aggregator = MetricsAggregator()
            
            logger.info("‚úÖ Componentes de sincronizaci√≥n inicializados")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error inicializando componentes: {e}")
            return False
    
    async def execute(self, args=None):
        """Ejecutar sincronizaci√≥n de s√≠mbolos"""
        try:
            logger.info("üöÄ Iniciando sincronizaci√≥n de s√≠mbolos...")
            
            # Inicializar componentes
            if not await self.initialize():
                return {"status": "error", "message": "Error inicializando componentes"}
            
            # Obtener configuraci√≥n
            sync_config = self.config.get("data_collection", {}).get("sync", {})
            symbols = sync_config.get("symbols", [])
            timeframes = sync_config.get("timeframes", [])
            max_workers = sync_config.get("max_workers", 4)
            delay_ms = sync_config.get("delay_ms", 100)
            
            if not symbols or not timeframes:
                logger.error("‚ùå Configuraci√≥n de s√≠mbolos o timeframes no encontrada")
                return {"status": "error", "message": "Configuraci√≥n no encontrada"}
            
            logger.info(f"üìä S√≠mbolos: {symbols}")
            logger.info(f"üìä Timeframes: {timeframes}")
            logger.info(f"‚öôÔ∏è Workers: {max_workers}, Delay: {delay_ms}ms")
            
            # Validar datos disponibles
            logger.info("üîç Validando datos disponibles...")
            validation_result = self.synchronizer._validate_data_availability(symbols, timeframes)
            
            if not validation_result["valid"]:
                missing_data = validation_result.get("missing_data", [])
                logger.error(f"‚ùå Datos insuficientes: {missing_data}")
                return {
                    "status": "error", 
                    "message": f"Datos insuficientes: {missing_data}",
                    "missing_data": missing_data
                }
            
            logger.info("‚úÖ Datos validados correctamente")
            
            # Sincronizar todos los s√≠mbolos
            logger.info("üîÑ Iniciando sincronizaci√≥n...")
            sync_result = await self.synchronizer.sync_all_symbols(symbols, timeframes)
            
            if not sync_result["success"]:
                logger.error(f"‚ùå Error en sincronizaci√≥n: {sync_result['message']}")
                return {"status": "error", "message": sync_result["message"]}
            
            logger.info("‚úÖ Sincronizaci√≥n completada")
            
            # Crear timeline maestro
            logger.info("üìÖ Creando timeline maestro...")
            master_timeline = self.synchronizer._create_master_timeline(symbols, timeframes)
            
            if not master_timeline:
                logger.error("‚ùå Error creando timeline maestro")
                return {"status": "error", "message": "Error creando timeline maestro"}
            
            logger.info(f"‚úÖ Timeline maestro creado: {len(master_timeline)} per√≠odos")
            
            # Ejecutar agentes en paralelo
            logger.info("ü§ñ Ejecutando agentes en paralelo...")
            execution_result = await self.executor.execute_agents_parallel(
                symbols=symbols,
                timeframes=timeframes,
                master_timeline=master_timeline,
                max_workers=max_workers,
                delay_ms=delay_ms
            )
            
            if not execution_result["success"]:
                logger.error(f"‚ùå Error en ejecuci√≥n paralela: {execution_result['message']}")
                return {"status": "error", "message": execution_result["message"]}
            
            logger.info("‚úÖ Ejecuci√≥n paralela completada")
            
            # Agregar m√©tricas
            logger.info("üìä Agregando m√©tricas...")
            metrics_result = await self.aggregator.aggregate_cycle_metrics(
                execution_result["results"],
                symbols,
                timeframes
            )
            
            if not metrics_result["success"]:
                logger.error(f"‚ùå Error agregando m√©tricas: {metrics_result['message']}")
                return {"status": "error", "message": metrics_result["message"]}
            
            logger.info("‚úÖ M√©tricas agregadas correctamente")
            
            # Guardar metadatos de sincronizaci√≥n
            session_id = f"sync_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            metadata = {
                "session_id": session_id,
                "symbols": symbols,
                "timeframes": timeframes,
                "master_timeline_length": len(master_timeline),
                "execution_results": execution_result["results"],
                "metrics": metrics_result["metrics"],
                "timestamp": datetime.now().isoformat()
            }
            
            db_manager.store_alignment_metadata(session_id, metadata)
            logger.info(f"‚úÖ Metadatos guardados: {session_id}")
            
            # Generar reporte final
            report = self._generate_report(execution_result, metrics_result, session_id)
            
            return {
                "status": "success",
                "message": "Sincronizaci√≥n completada",
                "session_id": session_id,
                "execution_results": execution_result["results"],
                "metrics": metrics_result["metrics"],
                "report": report
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error en sincronizaci√≥n: {e}")
            return {"status": "error", "message": str(e)}
    
    def _generate_report(self, execution_result, metrics_result, session_id):
        """Generar reporte final de sincronizaci√≥n"""
        try:
            results = execution_result["results"]
            metrics = metrics_result["metrics"]
            
            total_cycles = len(results)
            successful_cycles = len([r for r in results if r.status == "success"])
            total_pnl = sum(r.pnl for r in results if r.pnl is not None)
            total_trades = sum(r.trades_count for r in results if r.trades_count is not None)
            avg_win_rate = sum(r.win_rate for r in results if r.win_rate is not None) / max(1, successful_cycles)
            
            report = f"""
üîÑ <b>Reporte de Sincronizaci√≥n de S√≠mbolos</b>

üìä <b>Estad√≠sticas de Ejecuci√≥n:</b>
‚Ä¢ Ciclos totales: {total_cycles:,}
‚Ä¢ Ciclos exitosos: {successful_cycles:,}
‚Ä¢ Tasa de √©xito: {(successful_cycles/total_cycles*100):.1f}%
‚Ä¢ PnL total: ${total_pnl:+,.2f}
‚Ä¢ Total trades: {total_trades:,}
‚Ä¢ Win rate promedio: {avg_win_rate:.1f}%

üéØ <b>M√©tricas Agregadas:</b>
‚Ä¢ Estrategias identificadas: {len(metrics.get('strategy_rankings', []))}
‚Ä¢ Mejor estrategia: {metrics.get('best_strategy', 'N/A')}
‚Ä¢ Peor estrategia: {metrics.get('worst_strategy', 'N/A')}

üÜî <b>Sesi√≥n:</b> {session_id}
‚úÖ <b>Estado:</b> Sincronizaci√≥n completada exitosamente
            """
            
            return report.strip()
            
        except Exception as e:
            logger.error(f"‚ùå Error generando reporte: {e}")
            return "‚ùå Error generando reporte"

async def main():
    """Funci√≥n principal"""
    script = SyncSymbolsScript()
    result = await script.execute()
    
    if result["status"] == "success":
        print("‚úÖ Sincronizaci√≥n completada exitosamente")
        print(result["report"])
    else:
        print(f"‚ùå Error: {result['message']}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())